@inproceedings{10.1145/2047594.2047612,
author = {Settle, Amber},
title = {Computational thinking in a game design course},
year = {2011},
isbn = {9781450310178},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2047594.2047612},
doi = {10.1145/2047594.2047612},
abstract = {As a part of an NSF-funded project to enhance computational thinking in undergraduate general education courses, activities and assessments were developed for a game design course taught at DePaul University. The focus of the course is on game analysis and design, but the course textbook uses an approach that is heavily grounded in computational thinking principles. We describe the course activities and assignments and discuss an initial assessment of those materials. Our results show that there is a gap in difficulty between several of the activities and indicate that the materials developed help students to better learn the computational thinking concepts in the course.},
booktitle = {Proceedings of the 2011 Conference on Information Technology Education},
pages = {61–66},
numpages = {6},
keywords = {computational thinking, evaluation, game design},
location = {West Point, New York, USA},
series = {SIGITE '11}
}

@inproceedings{10.1145/2538862.2539023,
author = {Turbak, Franklyn and Martin, Fred and Pokress, Shaileen Crawford and Morelli, Ralph and Sherman, Mark and Wolber, David},
title = {Mobile computational thinking with app inventor 2 (abstract only)},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2539023},
doi = {10.1145/2538862.2539023},
abstract = {Computational Thinking Through Mobile Computing is an NSF-funded project for introducing students to computational thinking through creating mobile apps. In this hands-on workshop, which is targeted at undergraduate and secondary school computer science teachers, participants will develop Android apps using MIT App Inventor 2. This is a new version of the visual blocks-based programming environment with additional language features (e.g., local variables) and browser-based blocks editing. The workshop will also present pedagogical materials (lessons, tutorials, assignments), evaluation materials (blocks-based quizzes, surveys, project rubrics), and student projects. All of the pedagogical materials presented in the workshop, as well as all of the materials used by the workshop presenters in their individual courses, are posted on the Web and are available to everyone under a Creative Commons license. A laptop is required for this workshop. Each participant will be provided with an Android mobile device to use during the workshop. Participants who have their own Android phones or tablets can use them if they choose. This workshop is based upon work supported by the National Science Foundation under Grant Numbers 1225680, 1225719, 1225745, 1225976, and 1226216.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {745},
numpages = {1},
keywords = {CS0, blocks programming, computational thinking, event-based programming, mobile computing},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3159450.3162325,
author = {Duncan, Caitlin},
title = {Reported Development of Computational Thinking, Through Computer Science and Programming, and its Benefits for Primary School Students: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162325},
doi = {10.1145/3159450.3162325},
abstract = {Across the world there has been a paradigm shift in school education, as many countries are incorporating Computer Science (CS), programming, and Computational Thinking (CT), into their K-12 curriculums for the first time. In 2018 these subjects will be introduced to the New Zealand (NZ) Digital Technologies curriculum under the subject of "Computational Thinking". Like the majority of countries who have introduced these topics, NZ faces challenges in preparing teachers, and in successfully implementing a curriculum which achieves its educational goals. To support this curriculum, we have been conducting studies in primary schools across NZ, trialing resources with teachers and students. Building on a 2014 exploratory study on CS and programming in intermediate school, this project investigates the existing assumptions around CT education in K-12. It aims to address the specific questions: How do we teach CT concepts and approaches to primary aged students? If they learn CT, does it have the expected positive impacts on students learning? And, what other positive and negative impacts does this have?Throughout 2015 and 2016 a study was conducted with 18 primary school teachers from across NZ, who used CS Unplugged and educational programming languages in their classrooms. Teachers submitted feedback on these classes through an online form, and participated in semi-structured interviews. The feedback responses and interview transcripts were analysed using a thematic approach, which revealed many positive impacts on students general learning, minimal negative impacts, and observations of CT development.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {275},
numpages = {1},
keywords = {computational thinking, primary school, problem solving, programming education},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/2614217.2630597,
author = {J\"{o}rg, Sophie and Leonard, Alison E. and Babu, Sabarish and Gundersen, Kara and Parmar, Dhaval and Boggs, Kevin and Daily, Shaundra Bryant},
title = {Character animation and embodiment in teaching computational thinking},
year = {2014},
isbn = {9781450329583},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2614217.2630597},
doi = {10.1145/2614217.2630597},
booktitle = {ACM SIGGRAPH 2014 Posters},
articleno = {4},
numpages = {1},
location = {Vancouver, Canada},
series = {SIGGRAPH '14}
}

@inproceedings{10.1145/1508865.1508959,
author = {Lu, James J. and Fletcher, George H.L.},
title = {Thinking about computational thinking},
year = {2009},
isbn = {9781605581835},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1508865.1508959},
doi = {10.1145/1508865.1508959},
abstract = {Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency?We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content.},
booktitle = {Proceedings of the 40th ACM Technical Symposium on Computer Science Education},
pages = {260–264},
numpages = {5},
keywords = {computational thinking, k-12 education, language},
location = {Chattanooga, TN, USA},
series = {SIGCSE '09}
}

@article{10.1145/1539024.1508959,
author = {Lu, James J. and Fletcher, George H.L.},
title = {Thinking about computational thinking},
year = {2009},
issue_date = {March 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1539024.1508959},
doi = {10.1145/1539024.1508959},
abstract = {Jeannette Wing's call for teaching Computational Thinking (CT) as a formative skill on par with reading, writing, and arithmetic places computer science in the category of basic knowledge. Just as proficiency in basic language arts helps us to effectively communicate and in basic math helps us to successfully quantitate, proficiency in computational thinking helps us to systematically and efficiently process information and tasks. But while teaching everyone to think computationally is a noble goal, there are pedagogical challenges. Perhaps the most confounding issue is the role of programming, and whether we can separate it from teaching basic computer science. How much programming, if any, should be required for CT proficiency?We believe that to successfully broaden participation in computer science, efforts must be made to lay the foundations of CT long before students experience their first programming language. We posit that programming is to Computer Science what proof construction is to mathematics, and what literary analysis is to English. Hence by analogy, programming should be the entrance into higher CS, and not the student's first encounter in CS. We argue that in the absence of programming, teaching CT should focus on establishing vocabularies and symbols that can be used to annotate and describe computation and abstraction, suggest information and execution, and provide notation around which mental models of processes can be built. Lastly, we conjecture that students with sustained exposure to CT in their formative education will be better prepared for programming and the CS curriculum, and, furthermore, that they might choose to major in CS not only for career opportunities, but also for its intellectual content.},
journal = {SIGCSE Bull.},
month = mar,
pages = {260–264},
numpages = {5},
keywords = {language, k-12 education, computational thinking}
}

@inproceedings{10.1145/2960310.2960346,
author = {Good, Jon},
title = {Computational Thinking as a Computer Science Education Framework and the Related Effects on Gender Equity},
year = {2016},
isbn = {9781450344494},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2960310.2960346},
doi = {10.1145/2960310.2960346},
abstract = {I have recently completed my third year of study in the Educational Psychology and Educational Technology doctoral program at Michigan State University. I have successfully completed all of my coursework and comprehensive/qualifying exams. I will be proposing my dissertation study in the Fall semester of 2016 and expect to defend my dissertation in the Fall semester of 2017. My prior research has been focused on issues related to computational thinking, creativity, and computer science education. I am currently developing my literature review and honing my core research questions. I hope to subsequently develop my research methods and measures more fully, with plans to begin fieldwork in Fall of 2016.},
booktitle = {Proceedings of the 2016 ACM Conference on International Computing Education Research},
pages = {277–278},
numpages = {2},
keywords = {computational thinking, gender equity, secondary education},
location = {Melbourne, VIC, Australia},
series = {ICER '16}
}

@inproceedings{10.1145/2676723.2691940,
author = {Fordham, Eileen and Freger, Halley and Hinchman-Dominguez, Amanda and Mitchell, Alexander and Rebelsky, Daniel and Tsou, Victoria and Wheeler, Earnest and Wolter, Zoe and Rebelsky, Samuel A.},
title = {Developing Computational Thinking Through Image Making and Constructionist Learning (Abstract Only)},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2691940},
doi = {10.1145/2676723.2691940},
abstract = {Consider the following scenario: A student is browsing Facebook and sees a strangely compelling image on her friend's page. She follows the "how I made this link" to learn more. She finds herself on a page with a gallery of animations that she browses. Then she sees a "Create" button and clicks it. She skims the instructions and decides that this is not a "standard" graphics program - rather than using a timeline and "tools", it has just a few basic images (e.g., a horizontal blend, a vertical blend, some time-blends) and a few operations that you use to build new images from existing images. She plays a bit. And she finds that she can create some strange and interesting images, but not necessarily the ones she wants to make, and certainly not anything like her friend made. So she looks further. She learns that there are "challenges" that help you learn the system (and, as importantly, that help you consider and master different aspects of computational thinking), and tries to figure out how to make images as seemingly simple as a triangle or a circle using the limited selection of basic images and operations. It's not easy, but she finds it fun to try (and sometimes more fun to fail -- failures also create interesting images). You've just read a sample encounter with the Mathematical Image Synthesis Toolkit, or MIST. MIST is an open-source, Web-based graphics application that takes a constructionist approach in which open experimentation in image making helps students develop skills in computational thinking and deepen their understanding of mathematical functions. MIST is available at http://glimmer.grinnell.edu.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {690},
numpages = {1},
keywords = {animation, computational thinking, constructionism, functional programming, open source, social media, web software},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/2513456.2513484,
author = {Gouws, Lindsey and Bradshaw, Karen and Wentworth, Peter},
title = {First year student performance in a test for computational thinking},
year = {2013},
isbn = {9781450321129},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2513456.2513484},
doi = {10.1145/2513456.2513484},
abstract = {Computational thinking, a form of thinking and problem solving within computer science, has become a popular focus of research on computer science education. In this paper, we attempt to investigate the role that computational thinking plays in the experience of introductory computer science students at a South African university. To this end, we have designed and administered a test for computational thinking ability, and contrasted the results of this test with the class marks for the students involved. The results of this test give us an initial view of the abilities that students possess when entering the computer science course. The results indicate that students who performed well in the assessment have a favourable pass rate for their class tests, and specific areas of weakness have been identified. Finally, we describe the plan for a follow-up test to take place at the end of the course to determine how students' abilities have changed over a semester of studies.},
booktitle = {Proceedings of the South African Institute for Computer Scientists and Information Technologists Conference},
pages = {271–277},
numpages = {7},
keywords = {computational thinking, computer science education, student evaluation},
location = {East London, South Africa},
series = {SAICSIT '13}
}

@inproceedings{10.1145/2047594.2047678,
author = {Settle, Amber},
title = {The computational thinking across the curriculum workshop},
year = {2011},
isbn = {9781450310178},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2047594.2047678},
doi = {10.1145/2047594.2047678},
abstract = {We report on a workshop conducted as a part of an NSF-funded project focused on enhancing computational thinking in the general education curriculum. The workshop brought together project participants as well as other interested individuals to reflect on the first two years of the grant and begin planning for future work. We report on the results of a survey of workshop participants, providing insight into factors that contribute to the success of such events.},
booktitle = {Proceedings of the 2011 Conference on Information Technology Education},
pages = {311–312},
numpages = {2},
keywords = {community outreach, computational thinking},
location = {West Point, New York, USA},
series = {SIGITE '11}
}

@inproceedings{10.1145/2445196.2445227,
author = {Webb, Heidi and Rosson, Mary Beth},
title = {Using scaffolded examples to teach computational thinking concepts},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445227},
doi = {10.1145/2445196.2445227},
abstract = {In this paper we describe a set of computing activities that were used in an outreach enrichment program for middle school girls. The computing activities used a combination of scaffolded exam-ples and minimalist workbooks to introduce and support interaction with computational thinking (CT) concepts, including problem solving, abstraction and basic computational vocabulary. We describe the activities briefly, followed by a discussion of the girls' experiences, drawing primarily from interviews conducted at the end of each activity.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {95–100},
numpages = {6},
keywords = {middle school girls, scaffolded example, scratch},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@inproceedings{10.1145/3258452,
author = {Pala, Jill},
title = {Session details: Computational thinking},
year = {2011},
isbn = {9781450305006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3258452},
doi = {10.1145/3258452},
booktitle = {Proceedings of the 42nd ACM Technical Symposium on Computer Science Education},
location = {Dallas, TX, USA},
series = {SIGCSE '11}
}

@article{10.1145/3011071,
author = {Armoni, Michal},
title = {COMPUTING IN SCHOOLSComputer science, computational thinking, programming, coding: the anomalies of transitivity in K-12 computer science education},
year = {2016},
issue_date = {December 2016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {4},
issn = {2153-2184},
url = {https://doi.org/10.1145/3011071},
doi = {10.1145/3011071},
journal = {ACM Inroads},
month = nov,
pages = {24–27},
numpages = {4}
}

@inproceedings{10.1145/1822090.1822128,
author = {Miller, Craig S. and Perkovi\'{c}, Ljubomir and Settle, Amber},
title = {File references, trees, and computational thinking},
year = {2010},
isbn = {9781605588209},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1822090.1822128},
doi = {10.1145/1822090.1822128},
abstract = {We study student understanding of the use of a tree structure in the context of an introductory web development course. In particular, we analyze student answers as they use a tree structure to construct file references in web pages. More fundamentally, our study initiates a bottom-up study of computational thinking by identifying the computational thinking mistakes that students make when they are learning resource referencing for web development. Our preliminary results suggest that students do not necessarily learn abstract concepts (like trees) and abstract rules of reasoning (composing relative and absolute tree paths) by just working with folders and composing file references alone.},
booktitle = {Proceedings of the Fifteenth Annual Conference on Innovation and Technology in Computer Science Education},
pages = {132–136},
numpages = {5},
keywords = {computational thinking, file referencing, tree structures, web development},
location = {Bilkent, Ankara, Turkey},
series = {ITiCSE '10}
}

@article{10.5555/2753024.2753027,
author = {Jonas, Michael and Sabin, Mihaela},
title = {Computational thinking in Greenfoot: AI game strageties for CS1: conference workshop},
year = {2015},
issue_date = {June 2015},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {30},
number = {6},
issn = {1937-4771},
abstract = {We introduce workshop participants to Quoridor, a multiplayer strategy game for which we've developed an engine in Greenfoot [1]. We use Greenfoot, an interactive Java development environment designed primarily for educational purpose that allows easy development of two-dimensional graphical applications. Participants will first learn how to play the game and then follow a simple algorithm while playing to demonstrate the type of strategies that can be devised in the game engine. The session will then be divided into groups guided by workshop presenters and focus on developing a strategy and implementing it within the Quoridor engine in Greenfoot. At the end of the workshop, groups will be pitted against each other in a Battle Royal.},
journal = {J. Comput. Sci. Coll.},
month = jun,
pages = {8–10},
numpages = {3}
}

@inproceedings{10.1145/2538862.2538956,
author = {Van Dyne, Michele and Braun, Jeffrey},
title = {Effectiveness of a computational thinking (CS0) course on student analytical skills},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538956},
doi = {10.1145/2538862.2538956},
abstract = {: In this paper, we describe the content and evaluation of a Computational Thinking (CS0) course developed to improve the analytical problem solving of students participating in the course. The course is targeted to students who are mathematically under-prepared to enter our introductory programming sequence; however, it has recently been included in the University's general education curriculum so that students majoring in any discipline may take the course. Using the Whimbey Analytical Skills Inventory (WASI) students in the CS0 class, along with students in an analogous level engineering class (FESP), were tested at the beginning of the course and again at the end, using different versions of the test. The improvement in scores was statistically significant when measured by both the student t-test and the Cohen d (effect size) for CS0 students but not for the FESP students, providing support that the course does, in fact, increase student analytical problem solving skills. Courses in Computational Thinking have demonstrated success in many schools; however, this research demonstrates its effectiveness in improving analytical skills in majors as well as non-majors.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {133–138},
numpages = {6},
keywords = {CS0, analytical skills, computational thinking, course effectiveness, critical thinking, problem solving},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/2960310.2960347,
author = {Weese, Joshua Levi},
title = {Mixed Methods for the Assessment and Incorporation of Computational Thinking in K-12 and Higher Education},
year = {2016},
isbn = {9781450344494},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2960310.2960347},
doi = {10.1145/2960310.2960347},
abstract = {A movement to include computer science in K-12 curriculum standards has sparked a significant interest in computational thinking (CT). This paper describes current and future work in the development of visual programming curricula for teaching CT at the K-12 level and self-efficacy surveys for evaluating the effectiveness of the curricula at fostering CT. Current work on a comprehensive system for automated extraction of assessment data for descriptive analytics and visualization is also described. To complement attitude surveys, a translation of Scratch to Blockly is proposed. Data on student programming behaviors at the collegiate level will be collected and quantitatively analyzed to help assess CT in support of self-efficacy.},
booktitle = {Proceedings of the 2016 ACM Conference on International Computing Education Research},
pages = {279–280},
numpages = {2},
keywords = {assessment, computational thinking, outreach, self-efficacy},
location = {Melbourne, VIC, Australia},
series = {ICER '16}
}

@article{10.1145/1922681.1922682,
author = {Aho, Alfred V.},
title = {Ubiquity symposium: Computation and Computational Thinking},
year = {2011},
issue_date = {January 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2011},
number = {January},
url = {https://doi.org/10.1145/1922681.1922682},
doi = {10.1145/1922681.1922682},
abstract = {In this ninth piece to the Ubiquity symposium discussing What is computation? Alfred V. Aho shares his views about the importance of computational thinking in answering the question.  --Editor},
journal = {Ubiquity},
month = jan,
articleno = {1},
numpages = {8}
}

@inproceedings{10.1145/1227310.1227378,
author = {Henderson, Peter B. and Cortina, Thomas J. and Wing, Jeannette M.},
title = {Computational thinking},
year = {2007},
isbn = {1595933611},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1227310.1227378},
doi = {10.1145/1227310.1227378},
booktitle = {Proceedings of the 38th SIGCSE Technical Symposium on Computer Science Education},
pages = {195–196},
numpages = {2},
keywords = {computational thinking},
location = {Covington, Kentucky, USA},
series = {SIGCSE '07}
}

@article{10.1145/1227504.1227378,
author = {Henderson, Peter B. and Cortina, Thomas J. and Wing, Jeannette M.},
title = {Computational thinking},
year = {2007},
issue_date = {March 2007},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {1},
issn = {0097-8418},
url = {https://doi.org/10.1145/1227504.1227378},
doi = {10.1145/1227504.1227378},
journal = {SIGCSE Bull.},
month = mar,
pages = {195–196},
numpages = {2},
keywords = {computational thinking}
}

@inproceedings{10.1145/2493394.2493403,
author = {Seiter, Linda and Foreman, Brendan},
title = {Modeling the learning progressions of computational thinking of primary grade students},
year = {2013},
isbn = {9781450322430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2493394.2493403},
doi = {10.1145/2493394.2493403},
abstract = {We introduce the Progression of Early Computational Thinking (PECT) Model, a framework for understanding and assessing computational thinking in the primary grades (Grades 1 to 6). The model synthesizes measurable evidence from student work with broader, more abstract coding design patterns, which are then mapped onto computational thinking concepts.We present the results of a pilot-test study of the PECT Model in order to demonstrate its potential efficacy in detecting both differences in computational thinking among students of various ages as well as any clear overall progressions in increasing computational sophistication. Results of this sort are vital for establishing research-based and age-appropriate curricula for students in the primary grades, i.e., developing non-trivial, challenging but not overly daunting lesson plans that utilize the cognitive development stage of each grade level most effectively.},
booktitle = {Proceedings of the Ninth Annual International ACM Conference on International Computing Education Research},
pages = {59–66},
numpages = {8},
keywords = {scratch, programming, computational thinking, assessment},
location = {San Diego, San California, USA},
series = {ICER '13}
}

@inproceedings{10.1145/2676723.2691928,
author = {Albert, Jennifer and Peddycord III, Barry and Barnes, Tiffany},
title = {Evaluating Scratch Programs to Assess Computational Thinking in a Science Lesson (Abstract Only)},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2691928},
doi = {10.1145/2676723.2691928},
abstract = {In this poster, we describe efforts to assess computational thinking activities that can be easily implemented in any science classroom. Studies have shown that a set of conditions must be met for computational thinking tools to be used in K-12 education and that when they are used, there is a wide spectrum in the level of computational thinking that the tool enables. This study extends this work by examining how middle school students translated their science fair projects into Scratch and what evidence of computational thinking is present. Scrape, a tool designed to analyze Scratch projects was used. Overall, it was found that most students simply created a presentation of their project without much complexity. Eight students created interactive projects that required user participation and used more advanced computational concepts. Finally, recommendations are given for next steps in the creation of a series of activities that would scaffold student learning as they apply to computational thinking concepts of a science concept.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {679},
numpages = {1},
keywords = {computational science, computational thinking, middle school computer education, next generation science standards},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

