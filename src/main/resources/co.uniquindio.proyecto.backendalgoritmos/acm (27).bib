@inproceedings{10.1145/3335055.3335070,
author = {Eriksson, Eva and Iversen, Ole Sejer and Baykal, G\"{o}k\c{c}e Elif and Van Mechelen, Maarten and Smith, Rachel and Wagner, Marie-Louise and Fog, Bjarke Vognstrup and Klokmose, Clemens and Cumbo, Bronwyn and Hjorth, Arthur and Musaeus, Line Have and Petersen, Marianne Graves and Bouvin, Niels Olof},
title = {Widening the scope of FabLearn Research: Integrating Computational Thinking, Design and Making},
year = {2019},
isbn = {9781450362665},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3335055.3335070},
doi = {10.1145/3335055.3335070},
abstract = {FabLearn has primarily been concerned with studies of digital fabrication technologies in education, however, we witness an increased interest in integrating other related topics such as computational thinking, digital design and empowerment as an integrated whole. In this paper, we present a five years design research program for digital fabrication, computational thinking and design, to highlight why the FabLearn community should embrace this wider agenda to accomplish its ultimate goal to encourage a new generation to critically and constructively engage in the design of digital technology. The contribution of this paper is a number of open questions and considerations regarding the scope of European FabLearn research that we hope the community will consider and that might give rise to further discussions.},
booktitle = {Proceedings of the FabLearn Europe 2019 Conference},
articleno = {15},
numpages = {9},
keywords = {Making, FabLearn, Education, Design, Computational thinking},
location = {Oulu, Finland},
series = {FabLearn Europe '19}
}

@article{10.1145/3418291,
author = {Liu, Yuhang and Sun, Xian-He and Wang, Yang and Bao, Yungang},
title = {HCDA: from computational thinking to a generalized thinking paradigm},
year = {2021},
issue_date = {May 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {64},
number = {5},
issn = {0001-0782},
url = {https://doi.org/10.1145/3418291},
doi = {10.1145/3418291},
abstract = {As a new era in computing emerges, so too must our fundamental thinking patterns.},
journal = {Commun. ACM},
month = apr,
pages = {66–75},
numpages = {10}
}

@inproceedings{10.1145/3374920.3374972,
author = {Yu, Junnan and Zheng, Clement and Tamashiro, Mariana Aki and Gonzalez-millan, Christopher and Roque, Ricarose},
title = {CodeAttach: Engaging Children in Computational Thinking Through Physical Play Activities},
year = {2020},
isbn = {9781450361071},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3374920.3374972},
doi = {10.1145/3374920.3374972},
abstract = {Many toys and kits have been developed to help cultivate computational thinking in young children in the past decade. However, a majority of these kits ask children to move a robot/character around a limited space, constraining what could otherwise be generative and creative learning experiences into pre-defined activities and challenges with uniform outcomes. How can we expand what children can program and how they can create code? In this work, we present CodeAttach, a learning kit designed to engage young children in computational thinking through physical play activities. CodeAttach consists of three parts: (1) an interactive hardware device, (2) a mobile application to program the device, and (3) supporting materials for different play activities. With CodeAttach, children can attach the device to the supporting materials or other everyday objects to create their own props for physical play. The device offers different inputs and outputs and supports children to change the rules of existing physical activities or create new activities by programming this device. We outline the principles guiding the design of CodeAttach, its initial development process, and insights from early playtest with young kids and expert researchers.},
booktitle = {Proceedings of the Fourteenth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {453–459},
numpages = {7},
keywords = {young children, physical play, coding kit},
location = {Sydney NSW, Australia},
series = {TEI '20}
}

@article{10.1145/3263209,
author = {Peckham, Joan},
title = {Session details: Panel: computational thinking: on weaving it in},
year = {2009},
issue_date = {September 2009},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {41},
number = {3},
issn = {0097-8418},
url = {https://doi.org/10.1145/3263209},
doi = {10.1145/3263209},
journal = {SIGCSE Bull.},
month = aug
}

@inproceedings{10.1145/3257533,
author = {Peckham, Joan},
title = {Session details: Panel: computational thinking: on weaving it in},
year = {2009},
isbn = {9781605583815},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3257533},
doi = {10.1145/3257533},
booktitle = {Proceedings of the 14th Annual ACM SIGCSE Conference on Innovation and Technology in Computer Science Education},
location = {Paris, France},
series = {ITiCSE '09}
}

@inproceedings{10.1145/3230977.3230979,
author = {Rich, Kathryn M. and Binkowski, T. Andrew and Strickland, Carla and Franklin, Diana},
title = {Decomposition: A K-8 Computational Thinking Learning Trajectory},
year = {2018},
isbn = {9781450356282},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3230977.3230979},
doi = {10.1145/3230977.3230979},
abstract = {As new initiatives in computational thinking and computer science (CS/CT) are being developed and deployed, it is important to identify and understand the key concepts that are essential for student learning. In this study, we present the phases of construction of a learning trajectory (LT) for Decomposition in the context of CS/CT in K-8 education. From an extensive literature review, 63 learning goals representative of decomposition understanding and practices were identified and synthesized into 13 consensus goals. The focus of this paper is how relationships between these consensus goals were identified and used to place the goals into a learning trajectory. We discuss the theories and frameworks that guided the trajectory's construction as well as the methodology and justifications used to draw pathways through the trajectory in each phase. Finally, we discuss potential uses for the trajectory and suggest further explorations for decomposition in CS/CT.},
booktitle = {Proceedings of the 2018 ACM Conference on International Computing Education Research},
pages = {124–132},
numpages = {9},
keywords = {computational thinking, decomposition, k-8},
location = {Espoo, Finland},
series = {ICER '18}
}

@inproceedings{10.1145/3241815.3241886,
author = {Colombi, Alessandro and Fronza, Ilenia and Pahl, Claus and Basso, Demis},
title = {COCONATS: Combining Computational Thinking Didactics and Software Engineering in K-12},
year = {2018},
isbn = {9781450359542},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3241815.3241886},
doi = {10.1145/3241815.3241886},
abstract = {We report the status of the pre-experimental phase of a project called "Combining Computational Thinking Didactics and Software Engineering in K-12" (COCONATS), which aims at combining computational thinking and software engineering didactics in order to facilitate the acquisition of software engineering principles in K-12, while promoting the development of life-skills.},
booktitle = {Proceedings of the 19th Annual SIG Conference on Information Technology Education},
pages = {162},
numpages = {1},
keywords = {software engineering, k-12, computational thinking},
location = {Fort Lauderdale, Florida, USA},
series = {SIGITE '18}
}

@inproceedings{10.1145/3130859.3131335,
author = {Goyal, Sidhant and Chopra, Simran and Mohanan, Dileep},
title = {CodeFruits: Teaching Computational Thinking Skills Through Hand Gestures},
year = {2017},
isbn = {9781450351119},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3130859.3131335},
doi = {10.1145/3130859.3131335},
abstract = {Researchers in the past have explored several interactive tools and techniques to teach students abstract concepts of programming and computational thinking. They have explored playful and collaborative way to do so which includes text-based, visual or tangible programming toolkits. In CodeFruits, we are exploring hand gestures as an input interaction mechanism. These hand gestures represent different elements of programming languages such as functions and parameters. We have developed a gesture based interactive game which implicitly helps K-12 students to learn abstract concepts of computational thinking and write a computational code in an easier, playful and engaging way.},
booktitle = {Extended Abstracts Publication of the Annual Symposium on Computer-Human Interaction in Play},
pages = {291–298},
numpages = {8},
keywords = {k-12 students, hand gestures, games, computational thinking},
location = {Amsterdam, The Netherlands},
series = {CHI PLAY '17 Extended Abstracts}
}

@inproceedings{10.1145/3152832.3156620,
author = {Root, Erika and Steinkamp, Maren and Coldewey, Beatrice and Poloczek, Christin and Scharnowski, Frederik and Kettner, Mark and Koelle, Marion and Ananthanarayan, Swamy and Willms, Marlon},
title = {Grasping algorithms: exploring toys that teach computational thinking},
year = {2017},
isbn = {9781450353786},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3152832.3156620},
doi = {10.1145/3152832.3156620},
abstract = {Computational thinking has received increased attention over the past several years and is considered by many to be a fundamental and necessary literacy for children. One approach to teaching this skill has been through tangible programming since it facilitates intuitive interaction with children. In this paper, we introduce CodeTrain and CodeBox, two motorized toys whose behavior can be programmed through wooden building blocks without the use of a computer, tablet, or screen-based interface. The goal with both these designs is to foster playful exploration of computational thinking in pre-adolescent children through tangible objects. We describe the design process from the conceptual design to the functional prototype. Furthermore, we present first impressions of the prototypes from a pilot study and highlight some lessons learned from our first iteration.},
booktitle = {Proceedings of the 16th International Conference on Mobile and Ubiquitous Multimedia},
pages = {387–392},
numpages = {6},
keywords = {tangible programming, playfully interaction, computational toys, computational thinking, children},
location = {Stuttgart, Germany},
series = {MUM '17}
}

@inproceedings{10.1145/3265757.3265790,
author = {Van de Staey, Zimcke and Verlinde, Tobias and Demoen, Bart and Martens, Bern},
title = {Co-de: an online learning platform for computational thinking},
year = {2018},
isbn = {9781450365888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3265757.3265790},
doi = {10.1145/3265757.3265790},
abstract = {Computational thinking (CT) has gained wide recognition as an important K-12 educational goal, initially in the context of computer science (CS), and more recently also beyond CS. The development of CT teaching materials and approaches is therefore of prime importance. Here, an online learning platform for CT, named Co-De, is presented. It addresses five major aspects of CT explicitly, in the context of a variety of computational problems. Students using Co-De, work through classes, individually or in teams, doing a mixture of unplugged and online exercises and quizzes, as well as some programming. Teachers can fine-tune the default Co-De learning paths to cater for their specific groups of students and/or specific learning goals. Co-De is implemented on top of the open-source learning platform Moodle. It can be used directly at a central server, or a customised version can be installed and used locally.},
booktitle = {Proceedings of the 13th Workshop in Primary and Secondary Computing Education},
articleno = {32},
numpages = {2},
keywords = {secondary education, learning tools, computing education, computational thinking},
location = {Potsdam, Germany},
series = {WiPSCE '18}
}

@article{10.1145/3343445,
author = {Shah, Vipul},
title = {CSpathshala: bringing computational thinking to schools},
year = {2019},
issue_date = {November 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {62},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/3343445},
doi = {10.1145/3343445},
journal = {Commun. ACM},
month = oct,
pages = {54–55},
numpages = {2}
}

@inproceedings{10.1145/1734263.1734357,
author = {Repenning, Alexander and Webb, David and Ioannidou, Andri},
title = {Scalable game design and the development of a checklist for getting computational thinking into public schools},
year = {2010},
isbn = {9781450300063},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1734263.1734357},
doi = {10.1145/1734263.1734357},
abstract = {Game design appears to be a promising approach to interest K-12 students in Computer Science. Unfortunately, balancing motivational and educational concerns is truly challenging. Over a number of years, we have explored how to achieve a functional balance by creating a curriculum that combines increasingly complex game designs, computational thinking patterns and authoring tools. Scalable Game Design is a research project exploring new strategies of how to scale up from after school and summer programs into required curriculum of public schools through game design approaches. The project includes inner city schools, remote rural areas and Native American communities. A requirement checklist of computational thinking tools regarding curriculum, teacher training, standards and authoring tools has been developed and is being tested with thousands of students.},
booktitle = {Proceedings of the 41st ACM Technical Symposium on Computer Science Education},
pages = {265–269},
numpages = {5},
keywords = {game design, computational thinking, computational science},
location = {Milwaukee, Wisconsin, USA},
series = {SIGCSE '10}
}

@inproceedings{10.1145/3304221.3319786,
author = {Lytle, Nicholas and Catet\'{e}, Veronica and Boulden, Danielle and Dong, Yihuan and Houchins, Jennifer and Milliken, Alexandra and Isvik, Amy and Bounajim, Dolly and Wiebe, Eric and Barnes, Tiffany},
title = {Use, Modify, Create: Comparing Computational Thinking Lesson Progressions for STEM Classes},
year = {2019},
isbn = {9781450368957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3304221.3319786},
doi = {10.1145/3304221.3319786},
abstract = {Computational Thinking (CT) is being infused into curricula in a variety of core K-12 STEM courses. As these topics are being introduced to students without prior programming experience and are potentially taught by instructors unfamiliar with programming and CT, appropriate lesson design might help support both students and teachers. "Use-Modify-Create" (UMC), a CT lesson progression, has students ease into CT topics by first "Using" a given artifact, "Modifying" an existing one, and then eventually "Creating" new ones. While studies have presented lessons adopting and adapting this progression and advocating for its use, few have focused on evaluating UMC's pedagogical effectiveness and claims. We present a comparison study between two CT lesson progressions for middle school science classes. Students participated in a 4-day activity focused on developing an agent-based simulation in a block-based programming environment. While some classrooms had students develop code on days 2-4, others used a scaffolded lesson plan modeled after the UMC framework. Through analyzing student's exit tickets, classroom observations, and teacher interviews, we illustrate differences in perception of assignment difficulty from both the students and teachers, as well as student perception of artifact "ownership" between conditions.},
booktitle = {Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {395–401},
numpages = {7},
keywords = {modify-create, lesson design, computational thinking},
location = {Aberdeen, Scotland Uk},
series = {ITiCSE '19}
}

@inproceedings{10.1145/3328778.3372651,
author = {Ulzii-Orshikh, Nasanbayar and Dougherty, John},
title = {Iteration with Intention: Project-Based Learning of Computational Thinking},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372651},
doi = {10.1145/3328778.3372651},
abstract = {Globally, there is a growing interest in preparing students to develop fluency with computing. The K-12 Computer Science Framework states that by the end of 12th grade, students should be able to create computational artifacts through continuous testing and refining of their products considering unique perspectives of peers. It has been suggested that creative project experiences with iteration based on feedback encourage the development of these computational skills. However, traditional classrooms are more focused on getting the correct answer to standardized questions. Countries such as Mongolia may have particular challenges in offering students opportunities to develop projects, due to pressure from standardized exams for college entry and lack of teachers prepared to lead computational project-based learning (Uyanga, 2006). This is an exploratory study of an 8-session/16-hour intervention course that provided 13 high-school students in Mongolia an opportunity to create, share, and iterate on computational projects. Measurements included assessment of student attitudes and evaluated how they viewed their participation and learning in the course through pre- and post-surveys, analyzing their responses with qualitative coding. Results suggest that the opportunity to create projects was novel for these students; attitudes regarding feedback changed, and iteration was viewed as key in creating computational artifacts. The analysis also highlights the urgency of further research on localizing the K-12 Computer Science Framework throughout different countries to foster these skills and developing structures that allow students to embrace the freedom of project-based learning.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1289},
numpages = {1},
keywords = {scratch, project-based learning, localization, iteration, feedback, creativity, computational thinking},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3337722.3337768,
author = {Jiang, Xina and Harteveld, Casper and Huang, Xinyuan and Fung, Anthony Y. H.},
title = {The computational puzzle design framework: a design guide for games teaching computational thinking},
year = {2019},
isbn = {9781450372176},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3337722.3337768},
doi = {10.1145/3337722.3337768},
abstract = {Games have been designed to foster children's computational thinking (CT) skills, which is widely recognized as a key ability that should be mastered in this computing-driven era. Because learning coding skills is cognitively difficult and uninvolving for novices and it is recommended to learn CT concepts first, many educational games have been developed to teach CT in a non-coding environment. However, despite the breadth of such games and the demand for it, little is known about how to design such games or why such games are designed in a particular way. To address this gap, this paper presents a design framework that describes the building blocks for developing (non-coding) gameplay elements in games teaching CT. The framework focuses specifically on computational problem-solving because this is where games can specifically aid with. We illustrate the design framework through LittleWorld, a mobile game that teaches CT concepts through insects.},
booktitle = {Proceedings of the 14th International Conference on the Foundations of Digital Games},
articleno = {29},
numpages = {11},
keywords = {preschoolers, games for teaching CT, game design, educational games, computational thinking, computational problem-solving},
location = {San Luis Obispo, California, USA},
series = {FDG '19}
}

@inproceedings{10.1145/3406865.3418336,
author = {Gaikwad, Snehalkumar 'Neil' S.},
title = {Beyond Boundaries: Towards Symbiotic Relationship Between Ecological Arts and Computational Thinking for Sustainability},
year = {2020},
isbn = {9781450380591},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3406865.3418336},
doi = {10.1145/3406865.3418336},
abstract = {In today's Anthropocene era, human-and-climate induced sustainability challenges threaten the livelihood of vulnerable communities across the planet. To mitigate the risks of sustainability threats, data-and-theory driven scientific models, artistic practices, and environment designs play a critical role. However, these methods alone fail to reach a broader audience and translate into public discourse for participatory collective action. In this paper, we present Beyond Boundaries, a renaissance that re-envisions the relationship between ecological arts and computational thinking to contextualize threats to sustainability at regional and global scales. We establish an integrated framework combining Earth remote sensing satellite time-series, half a decade of ecological arts, and a public exhibition to curate the symbiotic relationship between arts and science. Beyond Boundaries sheds new light on how synergistic associations among disciplines can inspire scientific inquiry, artistic imaginations, and civic engagement-and-discourse for sustainability.},
booktitle = {Companion Publication of the 2020 Conference on Computer Supported Cooperative Work and Social Computing},
pages = {257–262},
numpages = {6},
keywords = {sustainability, remote sensing, environmental justice, ecological arts, data science, computations, and society, and civic engagement},
location = {Virtual Event, USA},
series = {CSCW '20 Companion}
}

@inproceedings{10.1145/3421590.3421607,
author = {Spieler, Bernadette and Kem\'{e}ny, Ferenc and Landerl, Karin and Binder, Bernd and Slany, Wolfgang},
title = {The learning value of game design activities: association between computational thinking and cognitive skills},
year = {2020},
isbn = {9781450387590},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3421590.3421607},
doi = {10.1145/3421590.3421607},
abstract = {Game design activities support young people to acquire Computational Thinking (CT) skills in an entertaining way. While the importance of CT is increasing, we still lack empirical data on how cognitive functions support learning to program. The current study is a step towards bridging this gap. We tested 48 participants aged 10-15 during summer courses to see how programming skills are associated with cognitive processes. Descriptive statistics of gaming and design elements of the participants' final projects were correlated with measures of working memory, creativity, and arithmetic. Results show that different concepts of CT applied in games were associated with separate cognitive measures. The number of design elements (shape and structure of the game, sound, visual design) correlated with both working memory and arithmetic skills; the number of game elements (interactivity, mechanics, dynamics, aesthetics) correlated with creativity; whereas the complexity of the project was only predicted by age. The overall evaluation of the project was associated with age and arithmetic skills. Since the different concepts of CT were predicted by different cognitive skills, the current study provides empirical evidence that CT is not a single homogenous skill, but a set of subskills, with each part loading on different cognitive functions.},
booktitle = {Proceedings of the 15th Workshop on Primary and Secondary Computing Education},
articleno = {19},
numpages = {4},
keywords = {working memory, game design strategies, creativity, computational thinking skills, arithmetic skills},
location = {Virtual Event, Germany},
series = {WiPSCE '20}
}

@inproceedings{10.1145/3392561.3394634,
author = {India, Gesu and Ramakrishna, Geetha and Pal, Joyojeet and Swaminathan, Manohar},
title = {Conceptual Learning through Accessible Play: Project Torino and Computational Thinking for Blind Children in India},
year = {2020},
isbn = {9781450387620},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3392561.3394634},
doi = {10.1145/3392561.3394634},
abstract = {Project Torino is a physical programming environment designed for teaching computational thinking (CT) to school children in the UK, regardless of the level of vision. We introduced Project Torino to children in three schools for the blind in Bangalore, India as a toy for playing with songs, rhymes, and stories. We present the results of 103 semi-structured play sessions spread over three months with 12 children (2 girls, 10 boys) with diverse backgrounds. We found that children progressed from playing with pre-connected examples, to making changes, to actively participating in what items are played. Engaging the children in conversation while they played, we established that the teams had grasped three basic concepts of computational thinking--flow of control, variables, and loops, without any explicit instructions towards learning them. We propose that play-based approaches can be successfully used with low resource overhead to introduce fundamental concepts of CT.},
booktitle = {Proceedings of the 2020 International Conference on Information and Communication Technologies and Development},
articleno = {6},
numpages = {11},
keywords = {User Experience Design, Individuals with Disabilities \&amp; Assistive Technologies, Empirical study that tells us about how people use a system, Education/Learning},
location = {Guayaquil, Ecuador},
series = {ICTD '20}
}

@inproceedings{10.1145/3287324.3287431,
author = {Dong, Yihuan and Catete, Veronica and Jocius, Robin and Lytle, Nicholas and Barnes, Tiffany and Albert, Jennifer and Joshi, Deepti and Robinson, Richard and Andrews, Ashley},
title = {PRADA: A Practical Model for Integrating Computational Thinking in K-12 Education},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287431},
doi = {10.1145/3287324.3287431},
abstract = {One way to increase access to education on computing is to integrate computational thinking (CT) into K12 disciplinary courses. However, this challenges teachers to both learn CT and decide how to best integrate CT into their classes. In this position paper, we present PRADA, an acronym for Pattern Recognition, Abstraction, Decomposition, and Algorithms, as a practical and understandable way of introducing the core ideas of CT to non-computing teachers. We piloted the PRADA model in two, separate, week-long professional development workshops designed for in-service middle and high school teachers and found that the PRADA model supported teachers in making connections between CT and their current course material. Initial findings, which emerged from the analysis of teacher-created learning materials, survey responses, and focus group interviews, indicate that the PRADA model supported core content teachers in successfully infusing CT into their existing curricula and increased their self-efficacy in CT integration.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {906–912},
numpages = {7},
keywords = {professional development, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3078072.3084306,
author = {Eloy, Adelmo Antonio da Silva and Martins, Amilton Rodrigues Quadros and Pazinato, Ariane Mileidi and Lukjanenko, Maria de Fatima S. Polesi and Lopes, Roseli de Deus},
title = {Programming Literacy: Computational Thinking in Brazilian Public Schools},
year = {2017},
isbn = {9781450349215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3078072.3084306},
doi = {10.1145/3078072.3084306},
abstract = {Bringing Programming to K-12 Education has been a strong tendency in Brazil and in the world. In this work-in-progress, we describe an experience in teacher training with the goal of promoting the practice of programming and the development of computational thinking in students of Brazilian public schools, through an initiative called Programming Literacy. Here we present strategies used in the implementation of the initiative, design of a curricular structure and training program, as well as monitoring and evaluation strategies. The results and findings of the initiative, involving more than 500 students from four cities in 2016, are shared as well as the perspectives on next steps.},
booktitle = {Proceedings of the 2017 Conference on Interaction Design and Children},
pages = {439–444},
numpages = {6},
keywords = {teacher training, programming, k-12 education, computer science education, computational thinking},
location = {Stanford, California, USA},
series = {IDC '17}
}

