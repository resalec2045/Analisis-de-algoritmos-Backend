@inproceedings{10.1145/3478431.3499387,
author = {Krakowski, Ari and Greenwald, Eric and Roman, Natalie},
title = {"That's What Science Is, All This Data:" Coding Data Visualizations in Middle School Science Classrooms},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499387},
doi = {10.1145/3478431.3499387},
abstract = {In this experience report, we describe the Investigating Air Quality curriculum unit that integrates computational data practices with science learning in middle school science classrooms. The unit is part of the Coding Science Internship instructional model, designed to broaden access to computer science (CS) learning through scalable integration in core science courses, and through confronting barriers to equitable participation in STEM. In this report, we describe the core features of the unit and share preliminary findings and insights from student experiences in 13 science classrooms. We discuss affordances and challenges for student learning of computational data practices in formal science classrooms, and conclude with emerging recommendations for instructional designers.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {36–42},
numpages = {7},
keywords = {computational thinking, data analysis, data science education, data visualization, middle school science},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/3545945.3569873,
author = {Shehzad, Umar and Recker, Mimi and Clarke-Midura, Jody},
title = {A Literature Review Examining Broadening Participation in Upper Elementary CS Education},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569873},
doi = {10.1145/3545945.3569873},
abstract = {Despite proliferated efforts to integrate computer science in elementary education, there is a dearth of studies that synthesize the current state of CS education research in formal educational contexts, specifically in upper elementary classrooms. Further, while numerous studies have investigated approaches and strategies that broaden participation in computing, the majority of them focus on secondary and post-secondary settings. The present study uses a systematic literature review process to review research conducted with students in formal classroom settings in grades 4, 5, and 6 and published since 2013. We review the research through two questions: What are barriers to broadening participation in CS in upper elementary (grades 4-6)? What instructional approaches and strategies help broaden participation in CS in upper elementary (grades 4-6)? A systematic search of the literature highlighted approaches used for broadening participation, including using various teaching media, designing scaffolds in instruction, and integrating into other subject areas. We conclude by identifying gaps in the research and identifying areas for further research.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {570–576},
numpages = {7},
keywords = {broadening participation in cs, computational thinking, cs literature review, formal cs education, upper elementary cs},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3357155.3358463,
author = {Solecki, Igor da Silva and Porto, Jo\~{a}o Vitor Araujo and Justen, Karla Aparecida and Alves, Nathalia da Cruz and von Wangenheim, Christiane Gresse and Borgatto, Adriano Ferreti and Hauck, Jean Carlo Rossa},
title = {CodeMaster UI design - app inventor: a rubric for the assessment of the interface design of Android apps developed with app inventor},
year = {2019},
isbn = {9781450369718},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357155.3358463},
doi = {10.1145/3357155.3358463},
abstract = {One way to teach computational thinking in K-12 is through the development of mobile applications with App Inventor. Although there exist several courses in this context, there is still a need for support for the evaluation of the applications created by the students. Specifically for the evaluation of the interface design there are still no automated approaches available. Thus, in order to support the evaluation of the visual design of apps based on its compliance with guidelines, we developed CodeMaster UI Design Rubric - App Inventor in the context of computing education in school. In order to facilitate its application in practice, the evaluation of applications created with App Inventor has been automated. The reliability and validity of the rubric were evaluated through an evaluation with 978 projects from the App Inventor Gallery. The results indicate that the CodeMaster UI Design Rubric - App Inventor can be considered reliable (Cronbach's alpha = 0.72). In terms of construct validity, there is evidence of convergent validity. However, we identified the need to revise some criteria due to a lack of correlations with UI design element categories. Based on these results, the rubric is being improved and larger-scale studies are being carried out.},
booktitle = {Proceedings of the 18th Brazilian Symposium on Human Factors in Computing Systems},
articleno = {17},
numpages = {10},
keywords = {Android, K-12, UI design, app inventor, education, mobile application, visual design},
location = {Vit\'{o}ria, Esp\'{\i}rito Santo, Brazil},
series = {IHC '19}
}

@inproceedings{10.1145/3291279.3341210,
author = {Metcalf, Shari and Dickes, Amanda and Brennan, Karen and Dede, Chris},
title = {Design of an Agent-Based Visual Programming Tool for Elementary Ecosystem Science Learning},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3341210},
doi = {10.1145/3291279.3341210},
abstract = {Computational thinking and scientific modeling are essential STEM education practices, and visual block-based programming interfaces offer new opportunities to make coding accessible in elementary school science. The EcoMOD research project blends computational modeling and ecosystem science learning through a 3D virtual forest ecosystem combined with a 2D visual block-based programming tool, for 3rd and 4th grade students (ages 8-10). During a 14-day curriculum, students explore an immersive virtual forest ecosystem, and program agent-based computational models of a beaver building a dam. As students run their program and watch their beaver agent go through the steps of building a dam, they observe the emergent outcomes as their programmed model impacts other elements of the ecosystem. The final curriculum was implemented with 7 teachers and approximately 150 students.A scaffolded coding interface provides domain-specific programming primitives, such as "move toward tree," "bite tree," and "pick up log." Conditional expressions include "if", "if/otherwise," and "repeat until," and can be nested. The interface provides a virtual 2D sandbox to test and edit programs, visual feedback during code execution, and debugging supports. Using design-based research methods, different sets of primitives and functionality were tested with students. Analysis of computational models constructed by students uses logfile data of programming activities over multiple class periods, as well as screen capture video of focus students. The poster will include design insights for the agent-based modeling language, including choices of primitives, conditionals, and scaffolding.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {309},
numpages = {1},
keywords = {agent-based programming, block-based programming, ecosystem science education, elementary computer science education, introductory visual programming environments},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@article{10.5555/3015220.3015227,
author = {Schreiber, Benjamin and Dougherty, John P.},
title = {Embedding algorithm pseudocode in lyrics to facilitate recall and promote learning},
year = {2017},
issue_date = {January 2017},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {32},
number = {3},
issn = {1937-4771},
abstract = {We introduce a sequence of three videos for binary search. This sequence takes the student through the problem, solution, algorithm and analysis, and mnemonic song with rhyming pseudocode lyrics. Having these materials in video form provides an alternate way to introduce binary search that can be used outside the classroom. We also suggest that this approach supports computational thinking, along with universal design in learning as visual and audio materials are both available.},
journal = {J. Comput. Sci. Coll.},
month = jan,
pages = {20–27},
numpages = {8}
}

@inproceedings{10.1145/3287324.3293712,
author = {Lin, Kevin and DeLiema, David},
title = {Subgoals, Problem Solving Phases, and Sources of Knowledge},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293712},
doi = {10.1145/3287324.3293712},
abstract = {Educational researchers have increasingly drawn attention to how students develop computational thinking (CT) skills, including in science, math, and literacy contexts. A key component of CT is the process of abstraction, a particularly challenging concept for novice programmers, but one vital to problem solving. We propose a framework based on situated cognition that can be used to document how instructors and students communicate about abstractions during the problem solving process. We develop this framework in a multimodal interaction analysis of a 32-minute long excerpt of a middle school student working in the PixelBots JavaScript programming environment at a two-week summer programming workshop taught by undergraduate CS majors. Through a microgenetic analysis of the process of teaching and learning about abstraction in this excerpt, we document the extemporaneous prioritization of subgoals and the back-and-forth coordination of problem solving phases. In our case study, we identify that (a) problem solving phases are nested with several instances of context-switching within a single phase; (b) the introduction of new ideas and information creates bridges or opportunities to move between different problem solving phases; (c) planning to solve a problem is a non-linear process; and (d) pedagogical moves such as modeling and prompting highlight situated resources and advance problem solving. Future research should address how to help students structure subgoals and reflect on connections between problem solving phases, and how to help instructors reflect on their routes to supporting students in the problem solving process.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1292},
numpages = {1},
keywords = {abstraction, computational thinking, debugging, education, problem solving, situated cognition},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3341525.3387421,
author = {Nolan, Karen and Faherty, Roisin and Quille, Keith and Becker, Brett A. and Bergin, Susan},
title = {Developing an Inclusive K-12 Outreach Model},
year = {2020},
isbn = {9781450368742},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3341525.3387421},
doi = {10.1145/3341525.3387421},
abstract = {This paper outlines the longitudinal development of a K-12 outreach model, to promote Computer Science in Ireland. Over a three-year period, it has been piloted to just under 9700 K-12 students from almost every county in Ireland. The model consists of a two-hour camp that introduces students to a range of Computer Science topics: addressing computing perceptions, introduction to coding and exploration of computational thinking. The model incorporates on-site school delivery and is available at no cost to any interested school across Ireland. The pilot study so far collected over 3400 surveys (pre- and post- outreach delivery). Schools from all over Ireland self-selected to participate, including male only, female only and mixed schools. The no-cost nature of the model meant schools deemed "disadvantaged", to private fee-paying schools participated. Initial findings are very positive, including the balance of male and female participants, where in the 2017-18 academic year it was 56:44 and in 2019-20 (to date), it is 35:65 respectively. Once the model is validated and tweaked (based on survey data), the model will be published (open access) for other institutions to implement the model locally. In addition, the authors intend to link schools (that the team have worked with over the three years) with local institutions, thus developing a sustainable ecosystem for the program to continue. This paper describes the model structure and outlines early findings.},
booktitle = {Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {145–151},
numpages = {7},
keywords = {K-12, computer science education, computing camps inclusive, female student, outreach, perceptions},
location = {Trondheim, Norway},
series = {ITiCSE '20}
}

@inproceedings{10.1145/3527927.3535198,
author = {Guler, Sibel Deren},
title = {Tekniverse: A world that connects signals, data, and people},
year = {2022},
isbn = {9781450393270},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3527927.3535198},
doi = {10.1145/3527927.3535198},
abstract = {This technical demonstration introduces Tekniverse (Figure 1), an end-to-end Internet-of-Things (IoT) toolkit designed for education, targeting middle and high school students as a tool for environmental data literacy. Tekniverse is a learning platform for data driven projects that teaches you how to create a network using physical objects — “things”— that can sense the environment, analyze data and exchange information. Tekniverse blends physical hands-on and “virtual fieldwork” to increase and equalize student resources. These features further cultivate critical thinking and anticipatory skills, acting as a vehicle for students to collaborate.},
booktitle = {Proceedings of the 14th Conference on Creativity and Cognition},
pages = {597–600},
numpages = {4},
keywords = {Computational Thinking, IoT, Physical Computing},
location = {Venice, Italy},
series = {C&amp;C '22}
}

@inproceedings{10.1145/2485760.2485803,
author = {Tinapple, David and Sadauskas, John and Olson, Loren},
title = {Digital culture creative classrooms (DC3): teaching 21st century proficiencies in high schools by engaging students in creative digital projects},
year = {2013},
isbn = {9781450319188},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2485760.2485803},
doi = {10.1145/2485760.2485803},
abstract = {Children and young adults are immersed in digital culture, but most are not familiar with the computational thinking behind the latest tools and technologies. There are few opportunities in secondary school curricula for students to learn such practices, but we believe that skills such as computational thinking, creative coding, collaboration, innovation, and information literacy can be taught in a highly effective manner by using aesthetic challenges as a motivation. In other words, by engaging students in creative digital arts projects they are naturally driven to acquire the many new skills to effectively use and understand the computational tools and techniques involved in creating digital and interactive projects. In this paper, we outline a project-based digital arts curriculum through which novice middle/high school students are intrinsically motivated to learn and apply science, technology, engineering and mathematics (STEM) skills and computational thinking.},
booktitle = {Proceedings of the 12th International Conference on Interaction Design and Children},
pages = {380–383},
numpages = {4},
keywords = {K-12, STEM, computer science, digital art, education, motivation, programming},
location = {New York, New York, USA},
series = {IDC '13}
}

@inproceedings{10.1145/3159450.3159478,
author = {Gusukuma, Luke and Bart, Austin Cory and Kafura, Dennis and Ernst, Jeremy and Cennamo, Katherine},
title = {Instructional Design + Knowledge Components: A Systematic Method for Refining Instruction},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159478},
doi = {10.1145/3159450.3159478},
abstract = {This paper reports on a systematic method used to improve an existing unit of instruction. The method is distinctive in combining steps of instructional design with "knowledge components" from a cognitively-based framework of learning. Instructional design is used to develop assessment instruments that incorporate information about student misconceptions. The method uses the assessment instruments to evaluate student performance and learning gains, while statistical analysis evaluates the quality of the instruments themselves using measures of difficulty and discrimination. Fine-grain insight into possible improvements is enabled by the knowledge components implicated by the assessment. The method is illustrated and evaluated by applying it to a unit of instruction on collection-based iteration in a computational thinking class. Data gathered during this evaluation highlights a number of opportunities within the unit to refine the instruction.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {338–343},
numpages = {6},
keywords = {CS education, CS1, assessment, instructional design, knowledge components},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3287324.3287400,
author = {Miller, L.D. and Soh, Leen-Kiat and Peteranetz, Markeya S.},
title = {Investigating the Impact of Group Size on Non-Programming Exercises in CS Education Courses},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287400},
doi = {10.1145/3287324.3287400},
abstract = {Computer science (CS) courses are taught with increasing emphasis on group work and with non-programming exercises facilitating peer-based learning, computational thinking, and problem solving. However, relatively little work has been done to investigate the interaction of group work and non-programming exercises because collaborative, non-programming work is usually open-ended and requires analysis of unstructured, natural language responses. In this paper, we consider collaborative, non-programming work consisting of online wiki text from 236 groups in nine different CS1 and higher-level courses at a large Midwestern university. Our investigation uses analysis tools with natural language processing (NLP) and statistical analysis components. First, NLP uses IBM Watson Personality Insights to automatically convert students' collaborative wiki text into a Big Five model. This model is useful as a quality metric on group work since Big Five factors such as Openness and Conscientiousness are strongly related to both academic performance and learning. Then, statistical analysis generates regression models on group size and each Big Five trait that make up the factors. Our results show that increasing group size has a significant impact on collaborative, non-programming work in CS1 courses, but not for such work in higher-level courses. Furthermore, increasing group size can have either a positive or negative impact on the Big Five traits. These findings imply the feasibility of using such tools to automatically assess the quality of non-programming group exercises and offer evidence for effective group sizes.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {22–28},
numpages = {7},
keywords = {cs education, group work, natural language processing, non-programming exercises, statistical analysis},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2839509.2850563,
author = {Aggarwal, Ashish and Gardner-McCune, Christina and Touretzky, David S.},
title = {Designing and Refining of Questions to Assess Students' Ability to Mentally Simulate Programs and Predict Program Behavior (Abstract Only)},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2850563},
doi = {10.1145/2839509.2850563},
abstract = {Mental simulation is an important skill for program understanding and prediction of program behavior. Assessing students' ability to mentally simulate program execution can be challenging in graphical programming environments and on paper-based assessments. This poster presents the iterative design and refinement process for assessing students' ability to mentally simulate and predict code behavior using a novel introductory computational thinking curriculum for Microsoft's Kodu Game Lab. We present an analysis of question prompts and student responses from data collected from three rising 3rd - 6th graders where the curriculum was implemented. Analysis of student responses suggest that this type of question can be used to identify misconceptions and misinterpretation of instructions. Finally, we present recommendations for question prompt design to foster better student simulation of program execution.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {696},
numpages = {1},
keywords = {computational thinking, cs curriculum, instruction design, k-12 education, kodu game lab, mental assessment, program simulation},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3265757.3265758,
author = {Robertson, Judy},
title = {Cheerful confusion and a thirst for knowledge: tales from the primary school computing classrooms},
year = {2018},
isbn = {9781450365888},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3265757.3265758},
doi = {10.1145/3265757.3265758},
abstract = {I have spent many years designing projects and software which I, as a computer scientist, thought would help school children learn about computing. Last year, with an experienced and imaginative teacher educator as my guide, I went on a journey to learn what children and teachers already know about computing and discover what they would like to learn more about.Over the course of ten months, we worked with fourteen primary school teachers who wanted to develop computational thinking in their classrooms. The teachers learned about basic ideas in computational thinking, and developed and adapted interdisciplinary activities to teach these to their learners. Through professional dialogue with their peers, they reflected on, and shared the challenges of using these activities in their classrooms. We visited the classrooms of these teachers to explore the children's views about the activities and to gauge the children's knowledge and interest in computing.This was a humbling experience for me as I learned how skilled the teachers were in teaching computational concepts in a way which all their learners could understand, by integrating computational thinking with other curricular activities. I was heartened by the children's interest and curiosity about computing in their everyday lives, even as I noted their confusion and puzzlement about the interface between hardware and software. As a result of these experiences, I believe that CS educators and researchers should increase our efforts to understand the existing computing knowledge base of children and teachers.},
booktitle = {Proceedings of the 13th Workshop in Primary and Secondary Computing Education},
articleno = {1},
numpages = {1},
location = {Potsdam, Germany},
series = {WiPSCE '18}
}

@inproceedings{10.1145/3139513.3139519,
author = {Ludovico, Luca Andrea and Malchiodi, Dario and Zecca, Luisa},
title = {A multimodal LEGO®-based learning activity mixing musical notation and computer programming},
year = {2017},
isbn = {9781450355575},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3139513.3139519},
doi = {10.1145/3139513.3139519},
abstract = {This paper discusses a multimodal learning activity based on LEGO® bricks where elements from the domains of music and informatics are mixed. Such an experience addresses children in preschool age and students of the primary schools in order to convey some basic aspects of computational thinking. The learning methodology is organized in two phases where construction blocks are employed as a physical tool and as a metaphor for music notation, respectively. The goal is to foster in young students abilities such as analysis and re-synthesis, problem solving, abstraction and adaptive reasoning. A web application to support this approach and to provide a prompt feedback to user action is under development, and its design principles and key characteristics will be presented.},
booktitle = {Proceedings of the 1st ACM SIGCHI International Workshop on Multimodal Interaction for Education},
pages = {44–48},
numpages = {5},
keywords = {Algomotricity, Education, Informatics education, Music, Visual Programming},
location = {Glasgow, UK},
series = {MIE 2017}
}

@inproceedings{10.1145/3017680.3017693,
author = {Diaz, Lien and Trees, Frances P. and Reed, Dale and Kick, Richard and Kuemmel, Andrew},
title = {Social Justice and Equity in CS Education: Inaugural Launch of AP Computer Science Principles},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017693},
doi = {10.1145/3017680.3017693},
abstract = {The inaugural launch of the College Board's Advanced Placement Computer Science Principles (AP CSP) course coincided within the same year of the announcement of CS For All, a bold national initiative that seeks to support the expansion of computer science education in America, and to empower students to learn computer science and obtain the computational thinking skills needed to thrive in today's transforming digital world. The intent of the AP CSP course supports this initiative as it aims to promote social justice and equity in computer science education. The course is designed to be appealing to a broader audience, including females and minority students, who are underrepresented in computer science, thus providing increased access and opportunity for students to study computer science at the secondary level.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {653–654},
numpages = {2},
keywords = {AP computer science principles CS for all, CS0, CS1, active learning, advanced placement computer science, case studies, computing applications, equity in computer science education, social justice in computer science education},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3573260.3573266,
author = {Cutts, Quintin and Kallia, Maria},
title = {Introducing Modelling and Code Comprehension from the First Days of an Introductory Programming Class},
year = {2023},
isbn = {9781450398213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3573260.3573266},
doi = {10.1145/3573260.3573266},
abstract = {An approach to code comprehension in an introductory programming class is presented, drawing on the Text Surface, Functional and Machine aspects of Schulte’s Block Model, and emphasising programming as a modelling activity involving problem and machine domains. To visually connect the domains and a program, a key diagram conceptualising the three aspects lies at the approach’s heart, alongside instructional exposition and exercises, which are all presented. Students find the approach challenging initially, but most recognise its value later, and identify, unexpectedly, the value of the approach for problem decomposition, planning and coding.},
booktitle = {Proceedings of the 7th Conference on Computing Education Practice},
pages = {21–24},
numpages = {4},
keywords = {code comprehension, computational thinking, introductory programming, modelling},
location = {Durham, United Kingdom},
series = {CEP '23}
}

@article{10.1145/3676497,
author = {Scott, Ava Elizabeth and Reicherts, Leon and Purohit, Aditya Kumar and Hossain, Elahi and Stefanidi, Evropi and Wagener, Nadine and Sch\"{o}ning, Johannes and Rogers, Yvonne and Holzer, Adrian},
title = {DIY Digital Interventions: Behaviour Change with Trigger-Action Programming},
year = {2024},
issue_date = {September 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {MHCI},
url = {https://doi.org/10.1145/3676497},
doi = {10.1145/3676497},
abstract = {Whether it is sleep, diet, or procrastination, changing behaviours can be challenging. Individuals could design and build their own personalised digital interventions to help them reach their goals, but little is known about this process. Building upon previous research we propose the Behaviour Change with Trigger-Action Programming (BC-TAP) model which describes how individuals could bridge the gap between their current and desired behaviour through the creation of 'Do-It-Yourself' (DIY) digital interventions. We conducted a two-day participatory workshop based on the BC-TAP model with 28 participants. Participants articulated plans to change a behaviour of their choice and represented these plans in mobile device automations. After using their interventions for up to three weeks, participants reflected on their experience. Our findings report opportunities and challenges at each stage of the process. While formulating a digital proxy for certain behaviours was challenging, both failures and successes facilitated participants' awareness of their behaviour, and their ability to change it.},
journal = {Proc. ACM Hum.-Comput. Interact.},
month = sep,
articleno = {252},
numpages = {28},
keywords = {automations, behaviour change, computational thinking, end-user programming, implementation intentions, self-reflection, trigger-action programming, wellbeing}
}

@inproceedings{10.1145/2493394.2493413,
author = {Friend, Michelle and Cutler, Robert},
title = {Efficient egg drop contests: how middle school girls think about algorithmic efficiency},
year = {2013},
isbn = {9781450322430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2493394.2493413},
doi = {10.1145/2493394.2493413},
abstract = {In this basic interpretative qualitative study, middle school girls with no formal experience in algorithmic reasoning, abstraction, or algebra were interviewed individually in order to help understand and explain how they think about algorithmic efficiency. A contextually relevant problem (determining the maximum height an "egg-drop contraption" could be dropped without breaking) was described to the students who were then asked 1) to come up with the most efficient solution they could to the problem while describing their thinking for the interviewer; and 2) to determine, from a choice of three solutions proposed by the interviewer, which is the most efficient.Students were found to have varying degrees of success in solving the problem or picking the most efficient solution. The most successful recognized the salient features of the problem and used them to generate possible solutions. The least successful were unable to understand the abstractions inherent in the problem. Students recognized that the most efficient of three proposed solutions may depend on the instance of the problem (where the contraption actually failed). They also understood that there was a "best" solution in general, and chose the solution that had the best worst-case scenario.Compared to college students studied previously using similar algorithmic reasoning problems, middle school girls appeared to perform similarly. They were able to demonstrate sophisticated computational thinking skills while suffering from some of the same algorithmic thinking limitations as older students.},
booktitle = {Proceedings of the Ninth Annual International ACM Conference on International Computing Education Research},
pages = {99–106},
numpages = {8},
keywords = {algorithmic efficiency, computational thinking, k-12, middle school},
location = {San Diego, San California, USA},
series = {ICER '13}
}

@inproceedings{10.1145/3159450.3159459,
author = {Peteranetz, Markeya S. and Wang, Shiyuan and Shell, Duane F. and Flanigan, Abraham E. and Soh, Leen-Kiat},
title = {Examining the Impact of Computational Creativity Exercises on College Computer Science Students' Learning, Achievement, Self-Efficacy, and Creativity},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159459},
doi = {10.1145/3159450.3159459},
abstract = {The purpose of the present study was to investigate how the inclusion of computational creativity exercises (CCEs) merging computational and creative thinking in undergraduate computer science (CS) courses affected students' course grades, learning of core CS knowledge, self-efficacy, and creative competency. CCEs were done in lower- and upper-division CS courses at a single university. Students in CCE implementation courses were compared to students in the same courses in different semesters. Propensity score matching was used to create comparable groups (control and implementation) based on students' GPA, motivation, and engagement. Results showed that implementing CCEs in undergraduate CS courses enhanced grades, learning of core CS knowledge, and self-efficacy for creatively applying CS knowledge. However, CCEs did not impact creative competency. The effect of the CCEs was consistent across upper- and lower-division courses for all outcomes. Unlike previous studies that only established the support for CCEs, such as positive dosage effects, the results of this study indicate that CCEs have a causal effect on students' achievement, learning, and self-efficacy, and this effect is independent of general academic achievement, motivation, and engagement. These findings establish the CCEs as a validated, evidence-based instructional method.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {155–160},
numpages = {6},
keywords = {computational creativity, computational thinking, computer science education},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3017680.3017787,
author = {Touretzky, David S. and Gardner-McCune, Christina and Aggarwal, Ashish},
title = {Semantic Reasoning in Young Programmers},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017787},
doi = {10.1145/3017680.3017787},
abstract = {Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft's Kodu Game Lab; the second group was also given four semantic "Laws of Kodu" to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {585–590},
numpages = {6},
keywords = {formal reasoning, kodu game lab, programming idioms},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

