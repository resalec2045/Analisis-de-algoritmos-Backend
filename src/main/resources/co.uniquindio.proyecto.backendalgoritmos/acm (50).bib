@inproceedings{10.1145/3304221.3319750,
author = {Lodi, Michael},
title = {Does Studying CS Automatically Foster a Growth Mindset?},
year = {2019},
isbn = {9781450368957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3304221.3319750},
doi = {10.1145/3304221.3319750},
abstract = {Many arguments are used to advocate for the introduction of Computer Science (CS) / Computational Thinking / "coding" in K-12 education. Growth mindset theory (GM) is also becoming very popular among educators and researchers. Some claims stating that studying CS can foster a GM have emerged. However, educational research shows that transfer of competences is hard. Very little research has been conducted on the relationship between GM and CS learning, with conflicting results. We measured some indicators (e.g., mindset, computer science mindset) at the beginning and the end of a high school year in five different classes: three CS oriented, one Chemistry oriented, and one Transportation&amp;Logistics oriented. In one of the CS oriented classes, we did a very brief GM intervention. At the end of the school year, none of the classes showed a statistically significant change in their mindset. Interestingly, non-CS oriented classes showed a significant decrease in their computer science growth mindset. In the intervention class, students suggested, to stimulate a GM, the need for activities that are more creative, engaging, and related to the real world and their interests.},
booktitle = {Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {147–153},
numpages = {7},
keywords = {computer science mindset, growth mindset, high school, transfer},
location = {Aberdeen, Scotland Uk},
series = {ITiCSE '19}
}

@inproceedings{10.1145/3653666.3656281,
author = {Diaz, Lien and Foster, Terry and Barashango, Sababu Chaka},
title = {Does the Advanced Placement Computer Science (CS) Principles course drive equitable and inclusive CS pedagogy, curriculum, and policy as a means to broaden participation in computing?},
year = {2024},
isbn = {9798400706264},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3653666.3656281},
doi = {10.1145/3653666.3656281},
abstract = {The premise for the development of the Advanced Placement (AP) Computer Science Principles course was aimed at broadening participation in computing, as a high school level CS course. Since AP courses carry credibility with millions of students who take AP Exams as they are recognized with prospects of obtaining a college education, the hope was that the AP CS Principles course would lead to increased participation in AP CS Exams, especially with students historically excluded in CS including girls, Black, Hispanic, and Native American students, as well those with disabilities. The course raises opportunities and access to CS in higher education. The AP CS Principles curriculum framework is used in the development of the Exam which is significant in the creation college credit and placement policies. Nearly 1,300 colleges and universities have created policies providing students with opportunities to receive college credit or placement for scoring a 3 or higher on the AP CS Principles Exam [12].The AP CS Principles curriculum framework is also used to define the learning outcomes for the course and stands as a pivotal tool in shaping high school CS education pathways to post-secondary introductory CS courses: It was designed to meet rigorous content requirements of an innovative first semester college-level introductory CS course. It exposes students to demanding expectations of building high levels of computational thinking skills and practical applications of programming that are valuable as they advance in their academics. It provides opportunities for students to connect fundamental programming concepts with important topics such as understanding the role of data in programming, and how data is processed and analyzed. AP CS Principles also recognizes the societal impacts of technology and teaches students about ethical considerations that may arise when analyzing bias in technological systems so that students develop a well-rounded perspective on technology's role in society [5]. Additional themes such as the infrastructure of the Internet including networks and protocols are also included.This paper focuses on the vision of the AP CS Principles course underpinnings (a) being engaging and appealing to a wider range of students, (b) making it accessible for a more racially, ethnically, and gender-identity diverse population of high school students, and (c) providing the benefits of the AP label on students' high school transcripts gives them options to consider a pathway into college CS studies with an enhanced admissions appeal, potential academic scholarships, and/or careers in the field. We investigate the structure of the AP CS Principles curriculum framework as a key resource that impacts the kinds of teaching and learning that is promoted in the Course and Exam Description. We discuss our experiences with the imbalanced emphasis on inclusive pedagogy and building community within the classroom to directly increase sense of belonging with students historically excluded from computing. Lastly, while the AP CS Principles Exam continues to flourish in participation numbers, we question the effectiveness of policies to promote broadening participation in computing. We review policies from three different states and discuss how they leverage the AP CS Principles course to promote teacher certification and student enrollment but do not necessarily ensure equitable practices to promote diverse representation in terms of gender, race, socioeconomic background, and disability.},
booktitle = {Proceedings of the 2024 on RESPECT Annual Conference},
pages = {158–162},
numpages = {5},
keywords = {CS education policy, advanced placement computer science principles, equity, inclusion},
location = {Atlanta, GA, USA},
series = {RESPECT 2024}
}

@inproceedings{10.1145/3628516.3655786,
author = {Possaghi, Isabella and Zhang, Feiran and Sharma, Kshitij and Papavlasopoulou, Sofia},
title = {Design Thinking Activities for K-12 Students: Multi-Modal Data Explanations on Coding Performance},
year = {2024},
isbn = {9798400704420},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3628516.3655786},
doi = {10.1145/3628516.3655786},
abstract = {Design thinking (DT) and computational activities foster children’s knowledge capital for 21st-century literacies. The analysis of these activities often overlooks affective and behavioural states despite their significance in providing insights into children’s learning processes. Typically, these states and their changes are self-reported, lacking real-time capturing. Moreover, inquiries via Multi-Modal Data (MMD) for more comprehensive views are underrepresented in the current literature. We, therefore, conducted a DT activity focusing on coding engaging 33 children (aged 10 to 12) and analysed measurements including learning gain (from knowledge tests) and behavioural and affective states (from physiological sensors, video and voice recordings). Our results show that engagement and confusion exhibit positive correlations between MMD measurements and learning gain, while stress, frustration and anger stand out as detrimental for it. By mapping transitions in states experienced by the children, we unravelled negative learning scenarios that should be limited, along with positive indicators of increased performance.},
booktitle = {Proceedings of the 23rd Annual ACM Interaction Design and Children Conference},
pages = {290–306},
numpages = {17},
keywords = {Coding, Design Thinking, Education, Learning, Learning Analytics, Multi-modal Data},
location = {Delft, Netherlands},
series = {IDC '24}
}

@article{10.5555/3381613.3381623,
author = {Krutz, Josiah and Siy, Harvey and Dorn, Brian and Morrison, Briana B.},
title = {Stepwise refinement in block-based programming},
year = {2019},
issue_date = {October 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {5},
issn = {1937-4771},
abstract = {With the popularity of block-based programming in CS0 courses, a growing number of students will learn a block language in their first exposure to programming. Studies indicate that blocks make it easier for novices to complete simple tasks and help them maintain or increase interest in computer science. But as they attempt more complicated programs, the mere ease of dragging and dropping blocks will not be sufficient to help them think through the process of composing blocks into a working program. We propose to incorporate stepwise refinement into block programming environments as an approach for novices to work out the computational thinking processes needed to write more complex programs. We present a prototype, developed by modifying the Google Blockly platform, to facilitate stepwise refinement. We conduct a small exploratory study with high school AP CS0 teachers to determine the feasibility of this approach and report on the teachers' feedback.},
journal = {J. Comput. Sci. Coll.},
month = oct,
pages = {91–100},
numpages = {10}
}

@inproceedings{10.1145/3568812.3603477,
author = {Andrei, Oana and Nabi, Syed Waqar},
title = {On Students’ Experiences with Algorithm Tracing using Pair Programming},
year = {2023},
isbn = {9781450399753},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568812.3603477},
doi = {10.1145/3568812.3603477},
abstract = {We have seen students struggling with fully understanding the algorithms when required to trace pseudocode for an Algorithmics course, even though examples and exercises on tracing each algorithm are provided throughout. This course is being taught in year 2 of the new Graduate Apprenticeship in Software Engineering programme (GA)&nbsp;[2], covering fundamental string and graph algorithms and basic computability topics. Code tracing helps students develop valid mental models of a program&nbsp;[7], while sketching&nbsp;[5, 9], used for tracing code via pen-and-paper drawing visualising program states or other computing processes, may help students manage cognitive load while understanding the notional machine&nbsp;[8] behind an algorithm. Hence sketching is fitting for tracing algorithm pseudocode. Pair programming (PP)&nbsp;[3] has been successfully adopted in CS education as a collaborative learning activity&nbsp;[6] where both learners work in pairs to solve a task, with one being the driver and the other the navigator, and swapping roles regularly. In a previous investigation on using PP for constructing finite state automata&nbsp;[1], we have found that GA students enjoyed working in pairs. We aim to investigate the feasibility of employing PP for algorithm tracing, similar to its application in programming. Our initial research question is: How do GA students experience the use of pair programming for tracing pseudocode of string and graph algorithms?Algorithms were taught over two weeks in block-mode, with one-hour lecture followed by a one-hour tutorial session each day, and 2-3 tracing exercises per tutorial. Students were encouraged to use PP for all tracing exercises during tutorials. In March 2023 we ran a pilot study to gather initial feedback on the PP setup. We asked students’ opinions on what they liked and what they didn’t like about using PP for algorithm tracing via an anonymous, online survey consisting of two open-ended questions. Seven out of 25 students enrolled in the course responded. The inductive thematic analysis of the survey responses shows that most students enjoyed collaboration to build up their understanding of algorithms. Themes around insufficiently supportive setup and time-consuming activity have been identified. The results of this pilot study suggest that while the activity was perceived as valuable, the PP setup requires enhancements. Future actions include: increase tutorial sessions structure with timing guidelines for each tracing exercise; provide blank paper and/or digital templates for tracing each algorithm; regularly assess progress in pairs and encourage students to seek assistance when encountering difficulties; utilise information from previous courses that use PP to pair up students with similar computational thinking skills&nbsp;[4]. To support students who opt to not use PP, we will explore methods to actively engage them. This includes identifying and utilising computer-based tools to assist with visualising algorithm execution and offering additional tutor support. We will continue using PP for tracing algorithms in the upcoming teaching session and further investigate the students’ experiences and their perceived and assessed performance when using PP.},
booktitle = {Proceedings of the 2023 ACM Conference on International Computing Education Research - Volume 2},
pages = {43},
numpages = {1},
location = {Chicago, IL, USA},
series = {ICER '23}
}

@inproceedings{10.1145/3626253.3635379,
author = {Garbrecht, Lisa and Baker, Stephanie and Wang, Zhuoying},
title = {Integrating Computer Science in Elementary Education},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635379},
doi = {10.1145/3626253.3635379},
abstract = {There is greater demand for Computer Science (CS) to be taught in elementary education as more states pass policies requiring it. Integrating CS into elementary education provides a viable avenue to teach CS to all students and can result in more equitable outcomes. However, our research demonstrates many elementary educators have concerns about not having enough time, training, knowledge, curricula, resources, and/or support to teach or integrate CS in their general education classrooms. This session will bring together educators, curriculum developers, professional learning providers, researchers, and practitioners interested in fostering CS and computational thinking skills among young learners. Topics will include how CS is currently being taught or integrated into elementary education, reasons why teachers are or are not integrating CS, resources and supports to address barriers to teaching CS, and what is needed to increase the integration of CS in elementary education on larger scales.  Attendees will have the opportunity to share their experiences, challenges, successes, and learnings related to teaching and/or integrating CS in elementary education toward the goals of learning from diverse perspectives and building collaborations to enhance their work. The discussion will delve into the importance of and barriers to early CS education, identify best practices and inclusive resources to make it accessible and engaging, and facilitate connections to others with similar interests to build a supportive CS learning community. This session will provide a comprehensive exploration of various perspectives in CS education.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1910},
numpages = {1},
keywords = {computer science education, computing curricula, elementary education, interdisciplinary connections, k12 instruction},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/2538862.2538961,
author = {Gorman, Jason and Gsell, Sebastian and Mayfield, Chris},
title = {Learning relational algebra by snapping blocks},
year = {2014},
isbn = {9781450326056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2538862.2538961},
doi = {10.1145/2538862.2538961},
abstract = {Relational algebra provides a theoretical foundation for how modern database management systems optimize and execute queries. Its main concepts are based on set theory and first order logic, which can be challenging for students to learn due to their abstract nature. This paper presents Bags, a new type of visual programming environment (inspired by Snap!) for the teaching of relational operations and data analysis. Students formulate algebraic queries by snapping together graphical blocks that represent data sets and relational operators, resulting in an interactive visualization of the underlying concepts. The outcomes of this work will not only enhance university-level database courses, but also provide an engaging computational thinking resource for K-12 teachers in content areas outside of science and engineering.},
booktitle = {Proceedings of the 45th ACM Technical Symposium on Computer Science Education},
pages = {73–78},
numpages = {6},
keywords = {computational thinking, data analysis, query design},
location = {Atlanta, Georgia, USA},
series = {SIGCSE '14}
}

@inproceedings{10.1145/3626253.3635342,
author = {Mcdaniel, Melinda},
title = {Creative Labs in a CS1 Course: Self-directed Labs Enhance Inclusivity in Computer Science Learning},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635342},
doi = {10.1145/3626253.3635342},
abstract = {Most CS1 classes are designed to teach programming and computational thinking using a specific programming language such as Python or Java. This type of in-depth study leaves little room for creative exploration by students. In particular, at large colleges and universities, the programming assignments are usually autograded to keep up with expanding enrollment. This lightning talk will introduce the idea that simply adding three creative labs that do not use the actual course material, but instead expose students to other computing concepts, can give the students who are struggling a chance to catch up, while also offering them a much-needed breather doing something in computing that is individually directed and creative.Over the last few years, my Teaching Assistants (TAs) and I have developed three simple web development labs as assignments for our large CS1 classes. These three labs are usually given around each of the exam weeks and provide a much-needed break for the students from the regular class material that continues to build upon prior learning. Many students report that the labs were their favorite part of the course because they were creative and self-directed.This lightning talk aims to gather feedback on this concept and assess its potential for integration into advanced CS courses. I'm also keen to hear suggestions for alternative labs in a CS1 class that would both introduce students to further CS principles and allow them to showcase their creativity.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1936},
numpages = {1},
keywords = {computing education, creativity, cs1, individualized instruction},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3397617.3398033,
author = {Fernandez, Cassia},
title = {Combining computational and science practices in K-12 education},
year = {2020},
isbn = {9781450380201},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3397617.3398033},
doi = {10.1145/3397617.3398033},
abstract = {In science education, the use of computational tools brings many possibilities for collecting, manipulating, and visualizing data, opening new pathways for exploring and making sense of scientific phenomena. However, although new types of data can now be easily accessed and collected for educational purposes, there are still few tools designed for children to make sense of these data in diverse and personally meaningful ways. The present study aims to explore new possibilities for integrating computational and science practices in K-12 education, with a focus on data analysis and visualization, in order to make science learning more relevant, contextualized, and meaningful to students. To this end, we intend to (a) develop a data visualization tool that allows students to engage in new ways of exploring and making sense of data through a block-based programming environment, and (b) codesign with middle school science teachers curricular units that will integrate the tool with the investigation of specific scientific phenomena. Interviews with teachers and students and classroom observations will be analyzed to identify affordances and limitations of the tool, as well as relevant pedagogical strategies and design principles that can guide the development and improvement of similar tools and curricular units.},
booktitle = {Proceedings of the 2020 ACM Interaction Design and Children Conference: Extended Abstracts},
pages = {25–29},
numpages = {5},
keywords = {computational thinking, data science, data visualization, science education, science practices},
location = {London, United Kingdom},
series = {IDC '20}
}

@inproceedings{10.1145/3556787.3556865,
author = {Fahrni, Nicolas and Repenning, Alexander},
title = {Quantifying the Corona Effect: How much the pandemic-induced switch from face-to-face to online teaching increased students' self-efficacy – a practical report.},
year = {2022},
isbn = {9781450398534},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3556787.3556865},
doi = {10.1145/3556787.3556865},
abstract = {This practical report explores the impact of forced learning design changes due to the Corona pandemic. At the School of Education Northwestern Switzerland over 2000 K-6 pre-service elementary school teachers got educated in computer science and computer science education over the last five years employing a learning design evolved through a Design Based Implementation Research (DBIR) approach. Assessing efficacy of the course through effect sizes the 2019 courses have served as pre-Corona baseline. Changing hastily in 2020 to online learning dramatically shifted the learning design in ways not initially anticipated in the DBIR process. Collaborative face-to-face (f2f) learning activities got replaced with individual online learning. Employing effect sizes has allowed us to quantify a Corona effect by comparing self-efficacy measures before Corona and during Corona. While there where only small effect sizes (0.5 &gt; Cohen's d ≥ 0.2) all these small effects were positive suggesting that the individual/online seminar worked slightly better than the collaborative/f2f seminar. The report highlights the most important changes to the learning design and compares 2019 with 2020 using effect sizes. For the most part the report can only speculate about the most relevant factors in the design change resulting in the unexpected overall improvement of course efficacy. It could be the shift from collaborative to individual practices, the mandatory peer feedbacks, or the online learning situation.},
booktitle = {Proceedings of the 17th Workshop in Primary and Secondary Computing Education},
articleno = {11},
numpages = {6},
keywords = {collaborative learning, computational thinking, computer science education, online learning},
location = {Morschach, Switzerland},
series = {WiPSCE '22}
}

@inproceedings{10.1145/2325296.2325347,
author = {Zur Bargury, Iris},
title = {A new curriculum for junior-high in computer science},
year = {2012},
isbn = {9781450312462},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2325296.2325347},
doi = {10.1145/2325296.2325347},
abstract = {Israel's Ministry of Education has launched a unique program to enhance science - technology education. It is a six year program for grades seven through twelve. The program introduces a new curriculum in computer science for junior-high school students. The computer science curriculum focuses on developing computational thinking. The purpose of this paper is to describe that curriculum and the preliminary evaluation of students' achievements.},
booktitle = {Proceedings of the 17th ACM Annual Conference on Innovation and Technology in Computer Science Education},
pages = {204–208},
numpages = {5},
keywords = {algorithmic thinking, computational thinking, computer science, curriculum, education, junior-high schools},
location = {Haifa, Israel},
series = {ITiCSE '12}
}

@inproceedings{10.1145/3510456.3514158,
author = {Pulimood, S. Monisha and Leigey, Margaret E. and Bates, Diane C. and Pearson, Kim and Mishra, Supriya},
title = {A project-based collaboration between software engineering and criminology students: building applications to understand racial injustice in the criminal justice system},
year = {2022},
isbn = {9781450392259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510456.3514158},
doi = {10.1145/3510456.3514158},
abstract = {Undergraduate software engineering courses typically require students to work on team-based projects that reinforce disciplinary content and soft skills. At the same time, these students, particularly those at liberal arts institutions, are required to take courses that focus on civic issues, including on racial and ethnic inequality. Often, students perceive these courses to be outside their disciplinary areas, and may not comprehend how these topics are applicable to computer science and software engineering. This paper reports on the experience of Pulimood and Leigey as they and their students grappled with issues of racial injustice in the criminal justice system, and drew upon their own disciplinary backgrounds to apply computational thinking and software engineering principles to help the community better understand these issues and advocate for reform. The paper also describes the experience of teaching courses from different disciplines in a collaborative model, working closely with a local community partner to support its work on an identified social issue, and the learning outcomes, as well as the benefits and challenges of this approach. Recommendations and future directions are also discussed.},
booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Software Engineering Education and Training},
pages = {14–24},
numpages = {11},
keywords = {community engaged learning, interdisciplinary collaboration, project-based learning, racial justice, software design and implementation, undergraduate software engineering},
location = {Pittsburgh, Pennsylvania},
series = {ICSE-SEET '22}
}

@inproceedings{10.1145/3017680.3017807,
author = {McCauley, Ren\'{e}e and Manaris, Bill and Heise, David and Sheller, Cate and Jolley, Jennifer and Zaring, Alan},
title = {Computing in the Arts: Curricular Innovations and Results},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017807},
doi = {10.1145/3017680.3017807},
abstract = {Computing in the Arts (CITA) is an innovative, interdisciplinary curriculum model which integrates computer science and information technology with traditional art theory and practice. At the College of Charleston, implementation of an undergraduate CITA degree program resulted in an increase in the number of female and minority students pursuing computing-related degrees. [14] With the support of the National Science Foundation (DUE 1323605) and two partner institutions, we are building a community of educators who are creating innovative instructional materials that synthesize computing and the arts. Three faculty summer workshops (Wake Forest University in 2014, College of Charleston in 2015, and University of North Carolina at Asheville in 2016) involved over 70 computer science and arts faculty from across the U.S. What has emerged are various ways of synthesizing computer science and arts, including creation of new synthesis courses, modifications to traditional computing courses, development of new CITA-like curricula, design of CITA-like project experiences for undergrads, and other creative endeavors combining computer science techniques and traditional art practices and theory. During the session, we will discuss steps involved in moving forward and keeping this community growing. The session will involve audience participation, including exchanges between the session presenters and other audience members. The goal is to share our results, hear about results from other non-presenting colleagues, and to continue to grow the teaching of computer science and computational thinking to the arts and humanities masses, as well as to further enrich traditional computer science courses with creative applications, assignments, and projects.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {693–694},
numpages = {2},
keywords = {computational thinking, computing in the arts, education, interdisciplinary education, media computation},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3594781.3594783,
author = {Fernandez, Cassia and De Deus Lopes, Roseli and Blikstein, Paulo},
title = {Programming Representations: Uncovering the Process of Constructing Data Visualizations in a Block-based Programming Environment},
year = {2023},
isbn = {9798400707360},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3594781.3594783},
doi = {10.1145/3594781.3594783},
abstract = {In this paper, we analyze how middle schoolers engaged in data visualization activities using PlayData, an educational tool designed to create representations for data by taking advantage of the flexibility and low entry point of block-based programming environments. Drawing on the analysis of artifacts and videos collected during a three-day workshop, we explore the types of visualizations created by participants and the process they engaged with to produce visualizations. Although the representational forms chosen by students were mainly traditional, our findings indicate that they were engaged in authentic data visualization practices throughout their programming process. These practices included translating ideas into programs, selecting parameters (such as color scheme and space between data points), inspecting the output, and adding annotations to provide context and better communicate the desired information. Moreover, our analysis pointed out opportunities for improving PlayData, mainly by the addition of new primitives for automating labeling and performing data transformations.},
booktitle = {Proceedings of the 2023 Symposium on Learning, Design and Technology},
pages = {11–20},
numpages = {10},
keywords = {block-based programming environments, computational thinking, data science education, data visualization},
location = {Evanston, IL, USA},
series = {LDT '23}
}

@article{10.1145/3379351,
author = {Werner, Linda and Denner, Jill and Campe, Shannon and Torres, David M.},
title = {Computational Sophistication of Games Programmed by Children: A Model for Its Measurement},
year = {2020},
issue_date = {June 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {2},
url = {https://doi.org/10.1145/3379351},
doi = {10.1145/3379351},
abstract = {This article builds on prior work that aims to measure computational learning (CL) during middle school. Since game computational sophistication (GCS) has been used as a proxy for a student’s engagement in CL we build on their model to more completely describe the relationship between different types of building blocks of computer games and GCS. In doing so, we present a single quantitative measurement for GCS. Our model, called GCS 2.0, has face validity for 39 games, each programmed by a pair of middle school children. We choose four of these games, two with high GCS and two with low GCS, and discuss the computational building blocks found in each game. We do this to help the reader better understand our measurement of GCS and its relationship to CL.},
journal = {ACM Trans. Comput. Educ.},
month = feb,
articleno = {12},
numpages = {23},
keywords = {Computational sophistication, assessment, computational learning, computational thinking, game programming, measurement, middle school, pair programming}
}

@inproceedings{10.1145/2839509.2844652,
author = {Touretzky, David S. and Gardner-McCune, Christina and Aggarwal, Ashish},
title = {Teaching "Lawfulness" With Kodu},
year = {2016},
isbn = {9781450336857},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839509.2844652},
doi = {10.1145/2839509.2844652},
abstract = {This paper introduces reasoning about lawful behavior as an important computational thinking skill and provides examples from a novel introductory programming curriculum using Microsoft's Kodu Game Lab. We present an analysis of assessment data showing that rising 5th and 6th graders can understand the lawfulness of Kodu programs. We also discuss some misconceptions students may develop about Kodu, their causes, and potential remedies.},
booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
pages = {621–626},
numpages = {6},
keywords = {formal reasoning, kodu game lab, programming idioms},
location = {Memphis, Tennessee, USA},
series = {SIGCSE '16}
}

@inproceedings{10.1145/3689187.3709613,
author = {Begum, Marjahan and Crossley, Julia and Str\"{o}mb\"{a}ck, Filip and Akrida, Eleni and Alpizar-Chacon, Isaac and Evans, Abigail and Gross, Joshua B. and Haglund, Pontus and Lonati, Violetta and Satyavolu, Chandrika and Thorgeirsson, Sverrir},
title = {A Pedagogical Framework for Developing Abstraction Skills},
year = {2025},
isbn = {9798400712081},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689187.3709613},
doi = {10.1145/3689187.3709613},
abstract = {Abstraction is a fundamental yet challenging skill to teach and learn in Computer Science education. Traditional frameworks of abstraction and concept formation often emphasize understanding an abstraction over its application, the latter being critical for practical Computer Science. Additionally, a common issue in education is when students may understand a concept in a classroom or a very specific setting but struggle to apply it outside of that context. In response, we present here a novel pedagogical framework designed to enhance both the development and application of abstraction skills in diverse educational contexts within the field of Computer Science. Our framework synthesizes common themes from existing models while introducing a new dimension focused explicitly on the actionable development of abstraction skills. Educators can adapt the framework to various educational contexts to support development of students' abstraction skills. Our framework was iteratively developed through a combination of theoretical analysis and reflective practice across multiple teaching contexts. We demonstrate the suitability of the framework by applying it to various case studies, demonstrating its broad applicability and practical utility. By offering a flexible yet comprehensive structure, our framework enables educators to effectively organize and deliver educational content, guiding students from abstract theoretical concepts to their practical application in Computer Science.},
booktitle = {2024 Working Group Reports on Innovation and Technology in Computer Science Education},
pages = {258–299},
numpages = {42},
keywords = {CS1 to CS3, abstraction, abstraction skills, algorithmic thinking, cognitive models, computational thinking, concurrency, data structures, educational frameworks, game theory, inferences, pedagogy, pointers, recursion},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3628516.3663348,
author = {Fernandez, Cassia and Blikstein, Paulo and Lopes, Roseli De Deus Lopes},
title = {Design failures in data visualization programming activities},
year = {2024},
isbn = {9798400704420},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3628516.3663348},
doi = {10.1145/3628516.3663348},
abstract = {In this pictorial, we critically analyze how students engaged in data representation activities using PlayData, a block-based programming environment tailored for data visualization purposes. Drawing upon data collected over two years with middle and high school students, we describe obstacles that impacted the interpretation of the data under analysis. These obstacles, here called "design failures", arose from either unexpected uses of the tool or shortcomings in the design of activities. We explore how each of these failures was used as an opportunity for refining both the tool's design and the associated activities. We conclude by offering recommendations for educators and researchers to support learners' engagement with visualization construction for effective reasoning with data.},
booktitle = {Proceedings of the 23rd Annual ACM Interaction Design and Children Conference},
pages = {574–586},
numpages = {13},
keywords = {Authors Keywords data science education, block-based programming environments, computational thinking, data visualization, design-based research},
location = {Delft, Netherlands},
series = {IDC '24}
}

@inproceedings{10.1145/3364510.3364513,
author = {Szabo, Claudia and Sheard, Judy and Luxton-Reilly, Andrew and Simon and Becker, Brett A. and Ott, Linda},
title = {Fifteen Years of Introductory Programming in Schools: A Global Overview of K-12 Initiatives},
year = {2019},
isbn = {9781450377157},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3364510.3364513},
doi = {10.1145/3364510.3364513},
abstract = {Computing education and outreach in the K--12 school sector have shown significant growth over recent decades, resulting in a large body of literature focused on the teaching and learning of computing. Despite this extensive literature, we are not aware of global overviews on teaching and learning programming as opposed to computing or computational thinking in K--12. We conducted a systematic review of the literature on introductory programming from 2003 to 2017. In this paper we review the papers that were set in the K--12 context with the aim of exploring developments that have been made in teaching introductory K--12 programming during this period. These include new programming languages, tools, teaching methods, and outreach programs. The impetus for these innovations was often a desire to provide interesting and engaging learning experiences and to ensure an appropriate level of instruction for a particular age group. Many initiatives were driven by changes to national curricula to mandate the teaching of programming. We find that there is a need for long-term studies to identify the most effective pedagogical approaches. We also identify a major need faced by many countries for training and resources to support teachers through the curriculum changes.},
booktitle = {Proceedings of the 19th Koli Calling International Conference on Computing Education Research},
articleno = {8},
numpages = {9},
keywords = {K--12, K12, introductory programming, novice programming, review, school, systematic literature review},
location = {Koli, Finland},
series = {Koli Calling '19}
}

@inproceedings{10.1145/3159450.3166087,
author = {Bell, Tim},
title = {What's the Big Idea with CS Education in K-12?},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3166087},
doi = {10.1145/3159450.3166087},
abstract = {Computer Science is seen in many different ways in society; some may consider it to be an esoteric collection of jargon-laden skills, while others view it as an essential topic of study for all citizens. Many of us are very passionate about sharing our enthusiasm for the subject with others, and we are at a time in history where much of the hard work to get the public to understand that it is something special is starting to bear fruit, as we see Computer Science and Computational thinking appearing in K-12 curricula around the world. But what is it about Computer Science that makes it so important and exciting? Is it a subject in its own right that deserves space in the curriculum? We will explore the reasons that young students should become engaged with the subject, illustrated using an Unplugged perspective.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {410},
numpages = {1},
keywords = {computer science unplugged, computing education, k-12},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

