@inproceedings{10.1145/3328778.3372674,
author = {Bain, Connor and Wilensky, Uri},
title = {Vectors of CT-ification: Integrating Computational Activities in STEM Classrooms},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3372674},
doi = {10.1145/3328778.3372674},
abstract = {While the Next Generation Science Standards set an expectation for developing computer science and computational thinking (CT) practices in the context of science subjects, it is an open question as to how to create curriculum and assessments that develop and measure these practices. In this poster, we show one possible solution to this problem: to introduce students to computer science through infusing computational thinking practices ("CT-ifying") science classrooms. To address this gap, our group has worked to explicitly characterize core CT-STEM practices as specific learning objectives and we use these to guide our development of science curriculum and assessments. However, having these learning objectives in mind is not enough to actually create activities that engage students in CT practices. We have developed along with science teachers, a strategy of examining a teacher's existing curricula and identifying potential activities and concepts to "CT-ify", rather than creating entirely new curricula from scratch by using the concept of scale as an "attack vector'' to design science units that integrate computational thinking practices into traditional science curricula. We demonstrate how we conceptualize four different versions of scale in science, 1. Time, 2. Size, 3. Number, and 4. Repeatability. We also present examples of these concepts in traditional high school science curricula that hundreds of students in a large urban US school district have used.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {1361},
numpages = {1},
keywords = {agent-based modeling, computational thinking, science education},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/3017680.3017718,
author = {Shell, Duane F. and Soh, Leen-Kiat and Flanigan, Abraham E. and Peteranetz, Markeya S. and Ingraham, Elizabeth},
title = {Improving Students' Learning and Achievement in CS Classrooms through Computational Creativity Exercises that Integrate Computational and Creative Thinking},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3017718},
doi = {10.1145/3017680.3017718},
abstract = {Our research is based on an innovative approach that integrates computational thinking and creative thinking in computer science courses to improve student learning and performance. Referencing Epstein's Generativity Theory, we designed and deployed Computational Creativity Exercises (CCEs) with linkages to concepts in computer science and computational thinking. Prior studies with earlier versions of the CCEs in CS1 courses found that completing more CCEs led to higher grades and increased learning of computational thinking principles. In this study, we extended the examination of CCEs to by deploying revised CCEs across two lower division (freshmen, sophomore) and three upper division (junior, senior) CS courses. We found a linear "dosage effect" of increasingly higher grades and computational thinking/CS knowledge test scores with completion of each additional CCE. This dosage effect was consistent across lower and upper division courses. Findings supported our contention that the merger of computational and creative thinking can be realized in computational creativity exercises that can be implemented and lead to increased student learning across courses from freshmen to senior level. The effect of the CCEs on learning was independent of student general academic achievement and individual student motivation. If students do the CCEs, they appear to benefit, whether or not they are self-aware of the benefit or personally motivated to do them. Issues in implementation are discussed.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {543–548},
numpages = {6},
keywords = {CS course achievement, computational thinking, creative thinking},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3478431.3499405,
author = {Kalathas, Paris and Parham-Mocello, Jennifer and Elliot, Rebekah and Lockwood, Elise},
title = {Exploring Math + CS in a Secondary Education Methods Course},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499405},
doi = {10.1145/3478431.3499405},
abstract = {There is wide-spread agreement that K-12 students need opportunities to explore computer science (CS) concepts and computational thinking within a wide array of disciplines for advancing, broadening, and diversifying the participation in CS. Programs such as "Computer Science for All" were created by the US government to motivate and help students of all ages to engage with CS, which was described as the "new basic skill for economic opportunity and social mobility". However, what is less understood is how to prepare teachers to engage with CS concepts and computational thinking, expanding their specialized and pedagogical content knowledge on these concepts. This study explores this gap in the context of a graduate-level secondary math education methods course in a university environment. To reduce the cognitive load for the teacher candidates as well as their students, we utilize the secondary mathematics curriculum to explore CS concepts infused into mathematics, avoiding at the same time an increase to the teaching hours to the extent that it is detrimental to the existing K-12 curriculum. Our study uses hybrid block-text programming-based teaching modules specifically designed to expose the similarities and the differences between mathematics and CS. We utilize the concept of variable and operations around it to explore how the teacher candidates' conceptions and misconceptions about CS make the understanding of those concepts easy or challenging, and how that affects their ability to incorporate them into their teaching.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {689–695},
numpages = {7},
keywords = {computational thinking, computer science, integrated curriculum, interdisciplinary, k-12, math + cs, mathematics, preservice teachers, programming, secondary education, teacher candidates, teacher development, variables},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/3556787.3556808,
author = {Assaf, Dorit and Reyes Mury, Sophia and Negrini, Lucio and Skweres, Melissa},
title = {”Roteco” - a Swiss teacher community for educational robotics},
year = {2022},
isbn = {9781450398534},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3556787.3556808},
doi = {10.1145/3556787.3556808},
abstract = {Computer Science has been introduced as a new subject in the compulsory school curriculum in Switzerland. Research on educational robotics has highlighted potentials of using robots as a hands-on tool to foster computational thinking skills. However, to date these kind of activities are not carried out systematically in schools. To support teachers, a teacher community for educational robotics and computer science education ”Roteco” has been established. Teachers can register for free to a digital platform to find classroom-ready activities, news, articles, and information about training and workshops in their region. Roteco further organizes webinars and events to build the community. Within two years, more than 1,400 teachers have joined the community. In this abstract, we present Roteco, our experiences in establishing the community, platform analytics data as well as a short summary of results from two surveys conducted in 2020 with 87 and in 2021 with 48 teachers. Detailed results can be found in the corresponding journal article [11].},
booktitle = {Proceedings of the 17th Workshop in Primary and Secondary Computing Education},
articleno = {18},
numpages = {2},
keywords = {Educational Robotics, community, computational thinking},
location = {Morschach, Switzerland},
series = {WiPSCE '22}
}

@inproceedings{10.1145/3501712.3529742,
author = {Fernandez, Cassia and Freitas, Jo\~{a}o Adriano and Lopes, Roseli de Deus and Blikstein, Paulo},
title = {Using video analysis and learning analytics to understand programming trajectories in data science activities with Scratch},
year = {2022},
isbn = {9781450391979},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3501712.3529742},
doi = {10.1145/3501712.3529742},
abstract = {In this paper, we describe a new automated tool to analyze how students create their projects on Scratch 3.0, with the goal of understanding learning trajectories in a way that considers students’ programming processes and practices, moving beyond the analysis of computational thinking concepts as evidence of learning. Drawing on a combination of qualitative video analysis and temporal learning analytics, we also present preliminary data from a pilot study that illustrates some possibilities afforded by this type of analytical tool. We expect that our tool can help researchers to better understand learning in the context of data visualization activities with block-based programming languages by shedding light on processes that are usually invisible and, thus, better support students in their diverse learning pathways.},
booktitle = {Proceedings of the 21st Annual ACM Interaction Design and Children Conference},
pages = {253–260},
numpages = {8},
keywords = {Scratch, computational thinking, data science, learning analytics, temporal analysis},
location = {Braga, Portugal},
series = {IDC '22}
}

@inproceedings{10.1145/3446871.3469792,
author = {Yan, Wei and Israel, Maya and Liu, Tongxi},
title = {Elementary Students’ Debugging Behaviors in a Game-based Environment},
year = {2021},
isbn = {9781450383264},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3446871.3469792},
doi = {10.1145/3446871.3469792},
abstract = {This basic interpretive qualitative study investigated four students’ debugging behaviors in Zoombinis, a game-based computational thinking (CT) environment. Analysis involved deductive coding of students’ debugging behaviors using videos of students’ computer screens. The findings revealed a range of debugging behaviors and strategies. Findings also indicated that students could articulate an intermediate understanding of debugging as related to the debugging LT [7].},
booktitle = {Proceedings of the 17th ACM Conference on International Computing Education Research},
pages = {441–442},
numpages = {2},
keywords = {Computational Thinking, Debugging, elementary education},
location = {Virtual Event, USA},
series = {ICER 2021}
}

@inproceedings{10.1145/3428029.3428063,
author = {Kahila, Juho and Parkki, Tuomo and Gr\"{o}hn, Anssi and Karvinen, Atte and Telimaa, Elmeri and Riikonen, Pekka and Tiitta, Riku and Haantio, Pasi and Kein\"{a}nen, Anssi and Kerkk\"{a}nen, Tero and Jormanainen, Ilkka and Penttinen, Silja and Tedre, Matti},
title = {Escape Room Game for CT Learning Activities in the Primary School},
year = {2020},
isbn = {9781450389211},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3428029.3428063},
doi = {10.1145/3428029.3428063},
abstract = {This systems short paper presents the design and implementation of an escape room game for practicing computational thinking (CT) skills in the primary school. The game, which can be packed into two small suitcases and set up anywhere, combines physical and virtual elements in order to engage learners into exploring the room. Aural elements with spoken tracks and background soundscape are combined with smart lighting to intensify the immersion. The game’s CT puzzles are modified from Bebras Challenge, and escaping the room requires solving all of them. This paper describes the game disposition and design, the room setup, design and implementation of computational thinking minigames, and the system architecture.},
booktitle = {Proceedings of the 20th Koli Calling International Conference on Computing Education Research},
articleno = {9},
numpages = {5},
keywords = {Computational thinking, K-12, escape room, game-based learning, primary school},
location = {Koli, Finland},
series = {Koli Calling '20}
}

@inproceedings{10.1145/3628516.3659418,
author = {Abelda\~{n}o, Romina and Bakala, Ewelina and Hitta, Santiago and Pires, Ana Cristina},
title = {"This is like a toy, it already got me": Results of Two Usability Studies of Robotito VPL App with Teachers: Robotito VPL Usability Evaluations},
year = {2024},
isbn = {9798400704420},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3628516.3659418},
doi = {10.1145/3628516.3659418},
abstract = {The relevance of computational thinking (CT) in early education is globally recognized, with Uruguay already incorporating it into kindergarten curricula. However, there is a notable disconnect: existing CT tools, primarily devised for small home groups, fall short in larger classroom settings. To bridge this gap, we developed Robotito VPL – an innovative, free, open-source application tailored to teachers with no programming background. Robotito VPL enables teachers to guide young children in CT learning with Robotito, a robot that engages with its surroundings, supporting a playful, hands-on learning experience for children. This paper presents the results of two usability evaluations with seven teachers. We then translated the outcomes of these evaluations into valuable lessons learned and specific design requirements.},
booktitle = {Proceedings of the 23rd Annual ACM Interaction Design and Children Conference},
pages = {919–923},
numpages = {5},
keywords = {Educational robotics, Educators, Mobile Application, Usability},
location = {Delft, Netherlands},
series = {IDC '24}
}

@inproceedings{10.1145/3531073.3531128,
author = {Abdollahinami, Sevda and Ducceschi, Luca and Zancanaro, Massimo},
title = {End-user Development and Closed-Reading: an Initial Investigation},
year = {2022},
isbn = {9781450397193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3531073.3531128},
doi = {10.1145/3531073.3531128},
abstract = {In this work, we explore the idea of designing a tool to augment the practice of closed-reading a literary text by employing end-user programming practices. The ultimate goal is to help young humanities students learn and appreciate computational thinking skills. The proposed approach is aligned with other methods of applying computer science techniques to explore literary texts (as in digital humanities) but with original goals and means. An initial design concept has been realised as a probe to prompt the discussion among humanities students and teachers. This short paper discusses the design ideas and the feedback from interviews and focus groups involving 25 participants (10 teachers in different humanities fields and 15 university students in humanities as prospective teachers and scholars).},
booktitle = {Proceedings of the 2022 International Conference on Advanced Visual Interfaces},
articleno = {36},
numpages = {5},
keywords = {Closed reading, Computational Thinking, Digital Humanities, End-User Development, Natural language processing},
location = {Frascati, Rome, Italy},
series = {AVI '22}
}

@inproceedings{10.1145/3459990.3465189,
author = {Im, Hyejin and Rogers, Chris},
title = {Draw2Code: Low-Cost Tangible Programming for Creating AR Animations},
year = {2021},
isbn = {9781450384520},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3459990.3465189},
doi = {10.1145/3459990.3465189},
abstract = {Computational thinking is nowadays considered an essential skill in the K-12 educational curriculum. Many tangible computational kits designed for early childhood are either too expensive to benefit a wide range of children or only provide predetermined challenges with limited creative content creation opportunities. In this paper, we investigated low-cost and expressive tangible interfaces that foster computational literacy. We present Draw2Code, a paper-based computational kit for young children to create an interactive AR animation. Children use Draw2Code to make their paper drawing alive as an animated virtual sprite and control it using hand gestures. It exposes children to basic programming concepts through playful and tangible interaction. Results from our initial evaluation with nine child-parent dyads indicate that children ages 5 to 12 successfully used Draw2Code and played with Draw2Code in 33 minutes on average while creating 2 to 5 diverse AR animations based on their ideas. Throughout the session, all children were engaged in computational thinking concepts and practices and learned drawing and gesture-based interactions.},
booktitle = {Proceedings of the 20th Annual ACM Interaction Design and Children Conference},
pages = {427–432},
numpages = {6},
keywords = {Augmented Reality, Computational Thinking, K-12 Education, Tangible User Interfaces},
location = {Athens, Greece},
series = {IDC '21}
}

@article{10.1145/3688854,
author = {Liao, Yin-Chan and Kim, Jiyoung and Ottenbreit-Leftwich, Anne T. and Karlin, Michael and Guo, Meize},
title = {Voices of Elementary Computer Science Teachers: Computer Science Integration Rationales and Practices},
year = {2024},
issue_date = {December 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {4},
url = {https://doi.org/10.1145/3688854},
doi = {10.1145/3688854},
abstract = {Objectives. Computer Science (CS) education has become increasingly prevalent in elementary schools because of multiple rationales, such as the importance of computational literacy and the growing demand for CS-related workforce preparation. As elementary CS standards continue to be adopted by many states, more examples and voices from the field may help educators understand what effective computational thinking (CT)/CS integration looks like in practice. Method. We employed a descriptive qualitative approach to study eight award-winning K-8 CS teachers and aimed to answer three research questions: (1) What were elementary CS teachers’ rationales for CT/CS integration? (2) How do elementary CS teachers integrate CT/CS into their classroom practices? (3) What are the needs of CS teachers for meaningful CT/CS integration in elementary schools? Data were collected through interviews, a questionnaire, and artifacts and analyzed using thematic analysis. Findings. Our findings of elementary CS teachers’ rationales for CT/CS integration encompassed its essential nature as a literacy skill, its potential to promote equity in education, and its alignment with standards across various disciplines. To support CT/CS integration at the elementary level, CS teachers described important aspects with examples from their instructional practices: (a) Real-world applications; (b) hands-on activities; (c) strategies to scaffold and guide student learning; (d) collaboration with classroom teachers; and (e) support from professional development (PD). Conclusion. The study results shared CS teachers’ voices from practice and shed light on the urgent need for more support and PD opportunities for both homeroom teachers and CS teachers in elementary schools, as well as the crucial need for multiple levels of support within K-12 school systems. Continuous efforts in creating systematic and sustainable PD plans and supporting collaborative professional communities for teachers within the instructional context are a must to help prepare our elementary students with the essential CS knowledge and skills they need to thrive in this technology-rich society.},
journal = {ACM Trans. Comput. Educ.},
month = oct,
articleno = {43},
numpages = {26},
keywords = {Computer science education, Computational thinking, Elementary education, Integrated computing}
}

@inproceedings{10.1145/3641555.3705235,
author = {Gonzalez, Elias and Chan, Joel and Weintrop, David},
title = {Quack! Configuring Large Language Models to Serve as Rubber Duck Coding Assistants},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705235},
doi = {10.1145/3641555.3705235},
abstract = {The emergence of Generative Artificial Intelligence (GenAI) tools broadly, and Large Language Models (LLMs) specifically, are equipping introductory programming instructors with a whole new class of pedagogical tools. While GenAI certainly poses threats to time-honored instructional techniques, it also provides opportunities for new forms of instructional support. In this work, we introduce our strategy for configuring an LLM to serve as a ''rubber duck debugging'' coding assistant to help novice programmers when they encounter difficulties in programming assignments. The key contribution of this work is not in the idea of using LLMs for debugging itself (which has already been demonstrated elsewhere, e.g., [3]) but to demonstrate the ease, flexibility, and pedagogical potential of the strategy. In particular, through carefully crafted prompts and easily accessible platforms, rubber duck LLMs can assist learners with specific questions while also situating those questions alongside larger computer science concepts and computational thinking practices. This work contributes an easily replicated and model-agnostic instructional strategy that productively and responsibly leverages the power of LLMs to assist novice programmers in developing foundational programming skills.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1463–1464},
numpages = {2},
keywords = {computer science education, generative ai, introductory programming, large language models},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3501709.3544276,
author = {Du, Hanxiang and Xing, Wanli and Zhang, Yuanlin},
title = {Misconception of Abstraction: When to Use an Example and When to Use a Variable?},
year = {2022},
isbn = {9781450391955},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3501709.3544276},
doi = {10.1145/3501709.3544276},
abstract = {Abstraction, which is considered the most important computational thinking skill, can be learned from programming or computational thinking learning activities. We implemented a 8-week long course to teach high school students statistics and programming. A pre- and post-test was designed to measure students’ understandings of computing and statistics. This work reports some interesting observations we made on students’ misconception of abstraction while examining students’ responses to test questions.},
booktitle = {Proceedings of the 2022 ACM Conference on International Computing Education Research - Volume 2},
pages = {28–29},
numpages = {2},
keywords = {Abstraction, misconception},
location = {Lugano and Virtual Event, Switzerland},
series = {ICER '22}
}

@article{10.1145/3690177.3690180,
author = {Alpizar-Chacon, Isaac},
title = {Extraction of Knowledge Models from Textbooks},
year = {2024},
issue_date = {Summer 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2024},
number = {Summer},
issn = {1931-1745},
url = {https://doi.org/10.1145/3690177.3690180},
doi = {10.1145/3690177.3690180},
abstract = {Isaac Alpizar-Chacon is an assistant professor in the Software Technology for Learning and Teaching group at the Department of Information and Computing Sciences, Utrecht University. In addition to his primary role, he is also an associate professor at the Instituto Tecnol\'{o}gico de Costa Rica. His research interests focus on the impact of GenAI tools in computing education, the integration of these tools into the classroom, the teaching and learning of computational thinking skills, and knowledge extraction. Dr. Alpizar-Chacon holds a MSc degree in Computer Science from Saarland University (Saarbr\"{u}cken, Germany) and a PhD degree in Information and Computing Sciences from Utrecht University (Utrecht, Netherlands).Homepage: https://isaacalpizar.info/},
journal = {SIGWEB Newsl.},
month = oct,
articleno = {3},
numpages = {4}
}

@article{10.1145/3702332,
author = {Geyser, Hanli},
title = {Decoloniality, Digital-coloniality and Computer Programming Education},
year = {2024},
issue_date = {December 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {24},
number = {4},
url = {https://doi.org/10.1145/3702332},
doi = {10.1145/3702332},
abstract = {Like digital technologies themselves, programming education is embedded in the colonial matrix of power, and access to programming knowledge demands immersion in the epistemologies of the Global North. While there is a growing body of work exploring ways to decolonise programming education, far more needs to be done. Current research focuses on the language of instruction and contextual curricula; outward-facing engagements with decolonisation. However, to move towards digital-decoloniality involves scrutinising how programming knowledge is recontextualised within curricula. Part of the project should be equipping both educators and students with the tools to recontextualise programming itself. To dismantle the colonial logic embedded in programming education, attention must be given to the knowledge formation of the discipline to identify moments of disruption. One such moment is the difficulty students face when recontextualising their mental models of computing, from programming skills to programming concepts. This occurs at the moment of reading, tracing and writing code. Programming requires one to refocus computational thinking and engage with a specific semiotic system, translating the authors’ intention into an executable computational process. Disrupting this moment using the strategies of critical literacies opens computer programming and its resulting code to critical examination, allowing an inward-facing decolonial engagement with the discipline.},
journal = {ACM Trans. Comput. Educ.},
month = dec,
articleno = {54},
numpages = {30},
keywords = {Introductory programming education, decoloniality, digital-colonialism, digital literacy, critical literacy, language}
}

@inproceedings{10.1145/3626253.3635481,
author = {del Vado V\'{\i}rseda, Rafael},
title = {Introducing Theoretical Computer Science Education in Social Sciences and Economics Degrees},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635481},
doi = {10.1145/3626253.3635481},
abstract = {The aim of this poster is to present and discuss a curricular methodology to introduce computability topics to social sciences and economics students during the study of their CS subjects in the first courses. These TCS topics give rise to algorithmic impossibility and computational undecidability results which serve to increase students' motivation in their CSE in relation to their university studies. In addition, it allows them to acquire paradoxical and computational thinking skills, with which to deepen and raise computability questions in later courses. To support the impact of the new methodology with evidence, we have analyzed preliminary student results.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1620–1621},
numpages = {2},
keywords = {computational economics, impossibility theorems, theoretical computer science, uncomputability, undecidability problems},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3572549.3572576,
author = {Rottenhofer, Marina and Leitner, Sandra and Emara, Mona and Sabitzer, Barbara and Rankin, Thomas},
title = {Vocabulary Acquisition through Computer Science Modeling: A Comparative Study on Visual and Textual Vocabulary Instruction},
year = {2023},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3572549.3572576},
doi = {10.1145/3572549.3572576},
abstract = {In Computer Science (CS), modeling with diagrams is a well-known practice to visualize complex software systems or database structures. However, modeling with e.g., entity-relationship diagrams or UML (Unified Modeling Language) is also helpful in other disciplines. In this research, CS models are used as a teaching and learning tool in foreign language acquisition. The field of computer science offers a variety of models that can visualize states, as well as processes and, are therefore very suitable for the different areas of language teaching (e.g., reading, writing, grammar-, or vocabulary acquisition). With CS modeling as a teaching and learning strategy, two main objectives are addressed: enhancing learning and retention and fostering computational thinking skills. This paper presents best practice examples on how to meet these two objectives as well as the results of a crossover study, where we investigated whether vocabulary acquisition is facilitated when it is thematically preorganized in class diagrams. The results illustrate that pupils who studied with the class diagram strategy had significantly higher recall performance than pupils who studied with the list of words. A qualitative analysis of the participants’ feedback after the intervention revealed decisive criteria for their preferences regarding the learning format.},
booktitle = {Proceedings of the 14th International Conference on Education Technology and Computers},
pages = {163–169},
numpages = {7},
keywords = {computational thinking, computer science-supported learning, digital education, foreign language learning, visualization},
location = {Barcelona, Spain},
series = {ICETC '22}
}

@inproceedings{10.1145/3605468.3605498,
author = {Greifenstein, Luisa and Brune, Markus and Fuchs, Tobias and Heuer, Ute and Fraser, Gordon},
title = {Impact of Hint Content on Performance and Learning: A Study with Primary School Children in a Scratch Course},
year = {2023},
isbn = {9798400708510},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3605468.3605498},
doi = {10.1145/3605468.3605498},
abstract = {The implementation of computational thinking concepts in primary school curricula usually includes programming activities. As primary school teachers often lack subject knowledge, they may struggle to help students during these programming activities. Additional support can be provided by automated program analysis, for example in terms of hints on conceptual knowledge related to bad coding patterns observed, or procedural hints on how to solve the task at hand. However, care has to be taken since these hints need to balance (1) helping students to perform a specific task successfully, while nevertheless (2) ensuring a learning effect beyond the specific task. To understand the effects of different types of hints we therefore conducted a study with 36 children aged 7–12 in 10 programming courses. After being introduced to basic programming structures in three units, the children were tasked to debug six Scratch programs using different types of hints, where we observed that procedural hints have the strongest impact on performance. In order to examine an impact on the transfer of learned knowledge, we observed the children’s difficulties during the successive fifth unit, in which they created their own projects. The results of the fifth unit show that having received a procedural hint on a specific pattern during the fourth unit leads to slightly fewer bad related code patterns but also to slightly fewer good code patterns. Considering these results together with the subjective perceptions of the children, we can derive insights into how to best support performance and learning using (automated) feedback.},
booktitle = {Proceedings of the 18th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {7},
numpages = {10},
keywords = {analysis tools, block-based programming feedback, bug patterns, computational thinking, elementary school},
location = {Cambridge, United Kingdom},
series = {WiPSCE '23}
}

@inproceedings{10.1145/3545947.3576321,
author = {Popov, Aleksandr},
title = {Motivation and Practices of Teaching Computational Social Science to Undergraduate Political Science Students},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576321},
doi = {10.1145/3545947.3576321},
abstract = {The introductory course in basics of programming aims to teach second-year political science students the basic skills of applied programming that are crucial for transferring their research ideas into computational models. As one of students' first interactions with computer science concepts, the course assists in overcoming their barriers in programming, and introduces them to ways of applying computational thinking. In addition, the course material can serve as a launching pad for further development in the areas of modelling social problems, its simulations and quantitative analysis. This paper presents course design considerations, shares findings in assignment design, and raises questions to consider when designing CS0 and CS1 courses for social science students.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1376},
numpages = {1},
keywords = {computational social science, teaching computational thinking},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3569173.3569179,
author = {De Bruin, Lucas and Nijenhuis-Voogt, Jacqueline and Yeni, Sabiha},
title = {Integrating CT into economics: Simulating monetary policy through computer models in spreadsheets by using a Use-Modify-Create strategy},
year = {2023},
isbn = {9781450397476},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3569173.3569179},
doi = {10.1145/3569173.3569179},
abstract = {Integrating computational thinking (CT) into the learning of school subjects is receiving increased attention. Developing students’ CT skills may not only advance their digital literacy but it may deepen subject specific learning as well. It is therefore interesting to investigate the learning of CT from a multidisciplinary perspective. This study describes the design of a CT integrated lesson for economics in which computer models in spreadsheets are used to simulate monetary policy. The lesson is structured according to the Use-Modify-Create strategy. The aim of this exploratory study is to evaluate the learning outcomes of this CT integrated lesson and students’ attitudes towards such a lesson. For this purpose, students’ exit tickets, feedback forms, supervisor observations and interviews with students have been analyzed. This qualitative analysis revealed that students perceived the lesson as difficult, especially during the Modify and Create phases. In addition, the results suggest that all phases are dependent on taking enough time to finish the Use phase to get familiar with the computational steps. Several suggestions have been given to improve the lesson, for instance, to use a simpler topic of economics. Furthermore, the analysis of students’ attitudes revealed that connections to CT could be made more explicit rather than implicitly embedded in the instructional strategy.},
booktitle = {Proceedings of the 11th Computer Science Education Research Conference},
pages = {46–53},
numpages = {8},
keywords = {CT education, Use-Modify-Create, computational thinking, computer models, economics, spreadsheets},
location = {Leiden, Netherlands},
series = {CSERC '22}
}

