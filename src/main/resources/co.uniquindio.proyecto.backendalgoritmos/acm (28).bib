@inproceedings{10.1145/3304221.3319772,
author = {Dong, Yihuan and Catet\'{e}, Veronica and Lytle, Nicholas and Isvik, Amy and Barnes, Tiffany and Jocius, Robin and Albert, Jennifer and Joshi, Deepti and Robinson, Richard and Andrews, Ashley},
title = {Infusing Computing: Analyzing Teacher Programming Products in K-12 Computational Thinking Professional Development},
year = {2019},
isbn = {9781450368957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3304221.3319772},
doi = {10.1145/3304221.3319772},
abstract = {In summer 2018, we conducted two week-long professional development workshops for 116 middle and high school teachers interested in infusing computational thinking (CT) into their classrooms. Teachers learned to program in Snap!, connect CT to their disciplines, and create infused CT learning segments for their classes. This paper investigates the extent to which teachers were able to successfully infuse CT skills of pattern recognition, abstraction, decomposition, and algorithms into their learning products.In this work, we analyzed 58 teacher-designed programming products to look for common characteristics, such as project type, intended coding requirements for their students, and code features/functionality. Teacher-created products were classified into five types: animation, interactive story, quiz, intended game, and simulation/exploration tools. Coding requirements varied from using and/or explaining provided code, modifying existing code, programming with starter code, to building entire programs. Products were classified according to the extent to which they involved sprite manipulation, questions/answers, event handling, drawing, and control blocks. We found that teachers from different disciplines created products that vary in type, coding requirements, and features to suit their specific needs. Moreover, we found relationships between discipline, project type, and the required coding teachers expected students to do.Our results inform future Infusing Computing Professional Development (PD) to provide more targeted training to support different teacher needs.},
booktitle = {Proceedings of the 2019 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {278–284},
numpages = {7},
keywords = {programming, professional development, k-12, computational thinking},
location = {Aberdeen, Scotland Uk},
series = {ITiCSE '19}
}

@inproceedings{10.1145/3450522.3451250,
author = {Schwartz, Lou and Maquil, Val\'{e}rie and Johannsen, Laurence and Moll, Christian},
title = {Enseigner la pens\'{e}e informatique avec Kniwwelino : \'{E}tude exploratoire de terrain en milieu scolaire: Teaching Computational Thinking with Kniwwelino: Exploratory Field Study in School Settings},
year = {2022},
isbn = {9781450383622},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3450522.3451250},
doi = {10.1145/3450522.3451250},
abstract = {We are presenting the results of a study carried out with six primary and secondary schools in Luxembourg, pilots in introducing the Kniwwwelino Classroom kit (KCK) in their teaching of programming and computational thinking to children. The aim of the study was to explore: (1) how teachers appropriate this kind of tool for teaching computational thinking and programming, (2) whether the KCK is suitable for this purpose, and (3) the user experience of the KCK. To these ends, we used several data collection tools through a mainly qualitative exploratory approach: semi-guided interviews, diaries and several questionnaires. We have learned that: (1) the KCK is versatile enough to adapt to different environments, objectives and pedagogical approaches and thus offers a great deal of freedom to teachers, (2) the playful and tangible approach of the KCK seems more adapted to introducing programming and enables pupils to develop problem-solving, collaboration and creativity skills, and (3) if the user experience has been positive for both teachers and students, this first KCK prototype is still addressing intermediate computer-skilled teachers.},
booktitle = {Proceedings of the 32nd Conference on l'Interaction Homme-Machine},
articleno = {6},
numpages = {11},
keywords = {Programming, K-12 Education, Interactive Learning Environments, Field Studies, Computational Thinking},
location = {Virtual Event, France},
series = {IHM '21}
}

@inproceedings{10.1145/3141880.3143782,
author = {Vrieler, Tina},
title = {Digital capital: a platform for developing computational thinking},
year = {2017},
isbn = {9781450353014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3141880.3143782},
doi = {10.1145/3141880.3143782},
abstract = {The introduction of computational thinking (CT) and computer science (CS) in the K-12 curricula highlights the need to understand young learners' various perceptions and attitudes towards CT and CS. To address this challenge we draw on the work of Bourdieu's capital and Archer et al.'s science capital to propose a new capital "digital capital" as a theoretical framework. We believe that a study on young people's development of digital capital is long overdue and can give a good indication of pupils' potential for developing CT skills, as well as CS aspirations in the future.},
booktitle = {Proceedings of the 17th Koli Calling International Conference on Computing Education Research},
pages = {205–206},
numpages = {2},
keywords = {science capital, digital capital, bourdieu},
location = {Koli, Finland},
series = {Koli Calling '17}
}

@inproceedings{10.1145/3213818.3213824,
author = {Carlborg, Niklas and Tyr\'{e}n, Markus and Heath, Carl and Eriksson, Eva},
title = {The Scope of Autonomy Model: Development of Teaching Materials for Computational Thinking in Primary School},
year = {2018},
isbn = {9781450353717},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3213818.3213824},
doi = {10.1145/3213818.3213824},
abstract = {During the 21st century there has been an increasing interest in the field of computational thinking as a consequence of the ever faster technical development. However, educating future generations in programming and computational thinking is not trivial. Many different platforms and teaching approaches can be used for this purpose. Inspired by the UK initiative with BBC micro:bit, this paper strives to identify what may be important to consider when designing teaching materials with the micro:bit for training Swedish primary school pupils' computational thinking skills relating to mathematical and technical school subjects. This has been investigated in an iterative process, by conducting 21 workshops with the goal to support primary school teachers in developing micro:bit teaching materials. The contribution of this paper is the Scope of autonomy model, which is based on the relation between pupils learning potential, their risk of feeling overwhelmed and the amount of choices provided in exercises. The model aim to support teachers in developing material for teaching programming and computational thinking in accordance with the new curriculum.},
booktitle = {Proceedings of the Conference on Creativity and Making in Education},
pages = {37–44},
numpages = {8},
keywords = {Teaching, Micro:bit, Education, Computational thinking, Autonomy},
location = {Trondheim, Norway},
series = {FabLearn Europe'18}
}

@inproceedings{10.1145/3291280.3291787,
author = {Katchapakirin, Kantinee and Anutariya, Chutiporn},
title = {An Architectural Design of ScratchThAI: A conversational agent for Computational Thinking Development using Scratch},
year = {2018},
isbn = {9781450365680},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291280.3291787},
doi = {10.1145/3291280.3291787},
abstract = {Scratch is a visual, block-based programming language, adopted as a computational thinking development tool in elementary education among many countries. Thailand has also recently included Scratch as part of the computing science course in its basic education. However, Thailand is facing a shortage of ICT teachers who are skillful in Scratch programming, especially in small provincial schools. This research aims to overcome the shortage by developing ScratchThAI, a Scratch tutorial chatbot. It is designed to assist young learners directly through a messaging platform. By giving supports through a textual conversation, more relevant advice, knowledge, and resources could be provided precisely. Different levels of each computational thinking concept are extracted and evaluated by the designed assessment algorithm. Extra predefined exercises are assigned based on the analyzed learner's strengths and weaknesses in order to actively improving the learner's understanding. Moreover, gamification is incorporated to engage and motivate young learners in computational thinking development.},
booktitle = {Proceedings of the 10th International Conference on Advances in Information Technology},
articleno = {7},
numpages = {7},
keywords = {Virtual Teaching Assistant, Virtual Scratcher, Scratch Tutoring Chatbot, Personalized Learning, Game-Based Learning, Educational Technology, Computational thinking development, AI in Education},
location = {Bangkok, Thailand},
series = {IAIT '18}
}

@inproceedings{10.1145/3291279.3339400,
author = {Kafai, Yasmin and Proctor, Chris and Lui, Debora},
title = {From Theory Bias to Theory Dialogue: Embracing Cognitive, Situated, and Critical Framings of Computational Thinking in K-12 CS Education},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3339400},
doi = {10.1145/3291279.3339400},
abstract = {The increased interest in promoting CS education for all has been coalescing around the idea of "computational thinking." Several framings for promoting computational thinking in K-12 education have been proposed by practitioners and researchers that each place different emphases on either (1) skill and competence building, (2) creative expression and participation, or (3) social justice and ethics. We review each framing and how the framings structure the theory space of computational thinking. We then discuss how CS education can leverage the explanatory potential that each framing offers to the implementation and evaluation of learning, teaching, and tools in computing education. Our goal is to help CS education researchers, teachers, and designers unpack and leverage the complexities of this theory space (rather than ignoring it) while also addressing broader educational concerns regarding diversity, providing new directions for how students and teachers can actively participate in designing their digital futures, and directing current computing education efforts towards a more humanistic orientation.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {101–109},
numpages = {9},
keywords = {programming, pedagogy, literacy, computational thinking},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@inproceedings{10.1145/2184512.2184547,
author = {Jenkins, Janet T. and Jerkins, James A. and Stenger, Cynthia L.},
title = {A plan for immediate immersion of computational thinking into the high school math classroom through a partnership with the Alabama math, science, and technology initiative},
year = {2012},
isbn = {9781450312035},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2184512.2184547},
doi = {10.1145/2184512.2184547},
abstract = {This paper describes a design for an immediate immersion of computational thinking into current high school math classrooms in Alabama. Most schools in our region have eliminated computer science classes from the curriculum. Alabama has an existing state initiative to improve mathematics, science and technology education in K-12. The Alabama Math, Science, and Technology Initiative (AMSTI) emphasizes learning by doing, with hands-on, activity based instruction. We have developed an instructional treatment that uses strategically designed computer exercises to push students to form the mental foundation necessary for abstraction and generalization. We selected popular problems from the AMSTI mathematics curriculum and applied our instructional design.The first step we took in implementing our plan for reintroducing computational thinking into the secondary schools was to conduct a workshop for math education leaders. This training was sponsored and supported by AMSTI. Results from the workshop included demonstrating to a select group of math education leaders that computer programming could be easily integrated with the AMSTI math curriculum and could be used to meet the educational goals of the initiative and the educators.},
booktitle = {Proceedings of the 50th Annual ACM Southeast Conference},
pages = {148–152},
numpages = {5},
keywords = {Python, abstraction, computational thinking},
location = {Tuscaloosa, Alabama},
series = {ACMSE '12}
}

@inproceedings{10.1145/2818314.2818315,
author = {Selby, Cynthia C.},
title = {Relationships: computational thinking, pedagogy of programming, and Bloom's Taxonomy},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818315},
doi = {10.1145/2818314.2818315},
abstract = {This study explores the relationship between computational thinking, teaching programming, and Bloom's Taxonomy. Data is collected from teachers, academics, and professionals, purposively selected because of their knowledge of the topics of problem solving, computational thinking, or the teaching of programming. This data is analysed following a grounded theory approach. A computational thinking taxonomy is developed. The relationships between cognitive processes, the pedagogy of programming, and the perceived levels of difficulty of computational thinking skills are illustrated by a model.Specifically, a definition for computational thinking is presented. The skills identified are mapped to Bloom's Taxonomy: Cognitive Domain. This mapping concentrates computational skills at the application, analysis, synthesis, and evaluation levels. Analysis of the data indicates that abstraction of functionality is less difficult than abstraction of data, but both are perceived as difficult. The most difficult computational thinking skill is reported as decomposition. This ordering of difficulty for learners is a reversal of the cognitive complexity predicted by Bloom's model. The plausibility of this inconsistency is explored.The taxonomy, model, and the other results of this study may be used by educators to focus learning onto the computational thinking skills acquired by the learners, while using programming as a tool. They may also be employed in the design of curriculum subjects, such as ICT, computing, or computer science.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {80–87},
numpages = {8},
keywords = {programming, pedagogy, Computational thinking, Bloom's Taxonomy},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3287324.3293835,
author = {Nguyen, N. Rich and Poliakova, Iuliia and Meduri, Sahithi and Hutcheson, Joshua and Ke, Ryan},
title = {CodeNC: Integrating Computational Thinking into K-12 Instructional Activities using Animated Videos},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293835},
doi = {10.1145/3287324.3293835},
abstract = {Increasing the representation of minorities in computer science (CS) has become a national priority. One of the many reasons minority students nationwide choose not to study CS is that they often lack mentors and role models to encourage them early in their learning. In her seminal article, Jeannette Wing argues that computational thinking (CT) is an emerging essential skill that should become an integral part of K-12 education. However, a big issue facing this initiative is that many K-12 teachers find themselves lack (1) relevant materials, (2) systematic training, and (3) a supportive community. The democratization of media, such as photos and videos, has provided a great variety of options to educate a broad audience on myriad topics. In this poster, we will describe the challenges and successes of using animated videos including its beauty, soundness, and utility as critical elements in establishing a strong CT comprehension while engaging K-12 teachers in a non-threatening way. Using a process of iterative design, we have found ways to integrate CT concepts in six non-CS disciplines in the K-12 curriculum. The teachers who have collaborated with us respond positively that this design approach provides them with a greater comprehension of the CT concepts while giving them exciting instructional activities. Therefore, this poster may be of interest to any CS educator who wishes to improve the engagement of K-12 teachers while sustaining a CT training program at their institution.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1276},
numpages = {1},
keywords = {k-12, instructional activities, computational thinking, animated videos},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3287324.3287361,
author = {Basawapatna, Ashok and Repenning, Alexander and Savignano, Mark},
title = {The Zones of Proximal Flow Tutorial: Designing Computational Thinking Cliffhangers},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287361},
doi = {10.1145/3287324.3287361},
abstract = {The creation of computer science tutorials is becoming critically important as hundreds of millions of students each year get their first CS experience through self-directed online activities. Creating a "cliffhanger" activity, with high engagement during and motivation to continue learning post activity, is a balancing act. If tutorials provide too much detailed information, users may be able to follow instructions but can feel overwhelmed or bored. On the other hand, tutorials that do not sufficiently explain crucial steps risk frustrating users who might drop out of the activity. Zones of Proximal Flow (ZPF) tutorials are simple to create and provide a navigation structure of differentiated instruction allowing users to choose appropriate detail based on their self-assessed state of flow, from bored to anxious. Using Retention of Flow analysis, two Hour of Code game design tutorials were analyzed: a sophisticated online tutorial for the creation of Frogger, and a simple ZPF tutorial for the creation of Pac-Man. One hope was that the simple ZPF Pac-Man tutorial would not do much worse than the sophisticated Frogger tutorial, but surprisingly the ZPF Pac-Man tutorial significantly outperformed the Frogger tutorial in terms of student retention. The Pac-Man tutorial also displayed a high student motivation to continue programming past the end of differentiated instruction.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {428–434},
numpages = {7},
keywords = {zones of proximal flow, zone of proximal development, tutorial, retention of flow, retention, hour of code, flow, exposure, cyberlearning, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3141880.3141910,
author = {Montero, Calkin Suero and Pihlainen, Kaisa},
title = {Let's play! music improvisation as a medium to facilitate computational thinking},
year = {2017},
isbn = {9781450353014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3141880.3141910},
doi = {10.1145/3141880.3141910},
abstract = {The current curricular changes across Europe towards the inclusion of computational thinking through coding in comprehensive schools have prompted new challenges for teachers that may not be confident nor have a scripted pedagogy to teach the core concepts, as well as for students that may have a negative bias towards such subjects. In this poster, we present our exploratory experiences using music improvisation as facilitation medium for presenting computational concepts to students, through a relaxed and anxiety-free atmosphere. We show the results of preliminary experiments in the wild, indicating that the emotional state of the participants is positively enhanced after a short section of music improvisation. Furthermore, we pose open questions to the CSE research community on the value of including short improvisation activities prior teaching programming concepts such as data, sequence, loops and conditionals, which are, oftentimes, perceived as difficult.},
booktitle = {Proceedings of the 17th Koli Calling International Conference on Computing Education Research},
pages = {199–200},
numpages = {2},
keywords = {music improvisation, computational thinking, comprehensive education},
location = {Koli, Finland},
series = {Koli Calling '17}
}

@inproceedings{10.1145/2800835.2800871,
author = {Han, Ahyoung and Kim, Jihyun and Wohn, Kwangyun},
title = {Entry: visual programming to enhance children's computational thinking},
year = {2015},
isbn = {9781450335751},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2800835.2800871},
doi = {10.1145/2800835.2800871},
abstract = {This paper introduces Entry, a visual programming application which is developed to facilitate children's computational thinking. As an HTML5-based visual programming platform, it provides children and beginners with an integrated environment in which they not only learn programming in an easy and fun way but also create, post and share their own programs. This will enhance children's computational thinking and is expected to serve as an effective learning tool for the STEAM education. We have held a workshop with 16 elementary school teachers and conducted a preliminary survey to illuminate Entry's 1) potential educational implications on logical thinking, problem solving and creativity, and 2) applicability in the field of education. This paper is expected to contribute to future research on programming education and STEAM education programs for children.},
booktitle = {Adjunct Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing and Proceedings of the 2015 ACM International Symposium on Wearable Computers},
pages = {73–76},
numpages = {4},
keywords = {visual programming, education, computational thinking},
location = {Osaka, Japan},
series = {UbiComp/ISWC'15 Adjunct}
}

@inproceedings{10.1145/3059009.3072987,
author = {Lonati, Violetta and Malchiodi, Dario and Monga, Mattia and Morpurgo, Anna},
title = {Bebras as a Teaching Resource: Classifying the Tasks Corpus Using Computational Thinking Skills},
year = {2017},
isbn = {9781450347044},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3059009.3072987},
doi = {10.1145/3059009.3072987},
abstract = {We present a new classification method for Bebras tasks based on the ISTE/CSTA operational definition of computational thinking. The classification can be appreciated by teachers without a formal education in informatics and it helps in detecting the cognitive skills involved by tasks, and makes their educational potential more explicit.},
booktitle = {Proceedings of the 2017 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {366},
numpages = {1},
keywords = {computing education, computational thinking, bebras},
location = {Bologna, Italy},
series = {ITiCSE '17}
}

@inproceedings{10.1145/3102071.3102106,
author = {Bauer, Aaron and Butler, Eric and Popovi\'{c}, Zoran},
title = {Dragon architect: open design problems for guided learning in a creative computational thinking sandbox game},
year = {2017},
isbn = {9781450353199},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3102071.3102106},
doi = {10.1145/3102071.3102106},
abstract = {Educational games have a potentially significant role to play in the increasing efforts to expand access to computer science education. Computational thinking is an area of particular interest, including the development of problem-solving strategies like divide and conquer. Existing games designed to teach computational thinking generally consist of either open-ended exploration with little direct guidance or a linear series of puzzles with lots of direct guidance, but little exploration. Educational research indicates that the most effective approach may be a hybrid of these two structures. We present Dragon Architect, an educational computational thinking game, and use it as context for a discussion of key open problems in the design of games to teach computational thinking. These problems include how to directly teach computational thinking strategies, how to achieve a balance between exploration and direct guidance, and how to incorporate engaging social features. We also discuss several important design challenges we have encountered during the design of Dragon Architect. We contend the problems we describe are relevant to anyone making educational games or systems that need to teach complex concepts and skills.},
booktitle = {Proceedings of the 12th International Conference on the Foundations of Digital Games},
articleno = {26},
numpages = {6},
keywords = {programming education, game-based learning, computational thinking},
location = {Hyannis, Massachusetts},
series = {FDG '17}
}

@inproceedings{10.1145/2978249.2978269,
author = {Millwood, Richard and Strong, Glenn and Bresnihan, Nina and Cowan, Pamela},
title = {CTWINS: improving Computational Thinking confidence in educators through paired activities},
year = {2016},
isbn = {9781450342230},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2978249.2978269},
doi = {10.1145/2978249.2978269},
abstract = {The CTwins project is a cross-border initiative targeting teachers of subjects other than Computing in the Republic of Ireland and Northern Ireland who want to use technology in the classroom but lack the confidence to do so. It aims to develop confidence in educators' capacity to use computational thinking through a playful and supportive introduction to computer programming. This will be done through paired learning exercises with an output intended to be aesthetically pleasing and fulfilling. Learning will be supported by an online community of practice.The project will be evaluated for its effect on building the confidence in participating educators and the design and resources will be created as a open educational resource.},
booktitle = {Proceedings of the 11th Workshop in Primary and Secondary Computing Education},
pages = {106–107},
numpages = {2},
keywords = {Teacher Training, Programming, Computational Thinking},
location = {M\"{u}nster, Germany},
series = {WiPSCE '16}
}

@inproceedings{10.1145/2839462.2856541,
author = {Goyal, Sidhant and Vijay, Rohan S. and Monga, Charu and Kalita, Pratul},
title = {Code Bits: An Inexpensive Tangible Computational Thinking Toolkit For K-12 Curriculum},
year = {2016},
isbn = {9781450335829},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2839462.2856541},
doi = {10.1145/2839462.2856541},
abstract = {The extensive research in the domain of computational thinking has identified itself as one of the critical skills that needs to be a part of regular K-12 curriculum. However, most of the tangible computational thinking toolkits that are being developed are bulky and expensive to be deployed in classroom environments. In this paper we present Code Bits, a paper based tangible computational thinking toolkit that is inexpensive, portable and scalable. The students create programs using the tangible paper bits on any flat surface and use the Code Bits mobile application to process the code, which runs on any android device with a camera and uses augmented reality based games to improve the computational thinking skills of the students. The toolkit has been designed in way so as to promote collaboration amongst students.},
booktitle = {Proceedings of the TEI '16: Tenth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {441–447},
numpages = {7},
keywords = {Tangible User Interfaces, K-12 education, Computational Thinking, Augmented Reality},
location = {Eindhoven, Netherlands},
series = {TEI '16}
}

@article{10.1145/3380956,
author = {Wiedemann, Kenia and Chao, Jie and Galluzzo, Benjamin and Simoneau, Eric},
title = {Mathematical modeling with R: embedding computational thinking into high school math classes},
year = {2020},
issue_date = {March 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {11},
number = {1},
issn = {2153-2184},
url = {https://doi.org/10.1145/3380956},
doi = {10.1145/3380956},
journal = {ACM Inroads},
month = feb,
pages = {33–42},
numpages = {10}
}

@inproceedings{10.1145/3013499.3013506,
author = {Duncan, Caitlin and Bell, Tim and Atlas, James},
title = {What do the Teachers Think? Introducing Computational Thinking in the Primary School Curriculum},
year = {2017},
isbn = {9781450348232},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3013499.3013506},
doi = {10.1145/3013499.3013506},
abstract = {This paper reports on the preliminary results of an ongoing study examining the teaching of new primary school topics based on Computational Thinking in New Zealand. We analyse detailed feedback from 13 teachers participating in the study, who had little or no previous experience teaching Computer Science or related topics. From this we extract key themes identified by the teachers that are likely to be encountered when deploying a new curriculum, including unexpected opportunities for cross-curricula learning, development of students' social skills, and engaging a wide range of students. From here we articulate key concepts and issues that arise in the primary school context, based on feedback during professional development for the study, and direct feedback from teachers on the experience of delivering the new material in the classroom.},
booktitle = {Proceedings of the Nineteenth Australasian Computing Education Conference},
pages = {65–74},
numpages = {10},
keywords = {teachers, curriculum, Computational thinking},
location = {Geelong, VIC, Australia},
series = {ACE '17}
}

@inproceedings{10.1145/2445196.2445302,
author = {Bennett, Vicki E. and Koh, KyuHan and Repenning, Alexander},
title = {Computing creativity: divergence in computational thinking},
year = {2013},
isbn = {9781450318686},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2445196.2445302},
doi = {10.1145/2445196.2445302},
abstract = {Conventionally creativity is often conceived as an aptitude to be discovered in an individual that cannot be mathematically measured. But the concept of creative thinking as a divergence from a standard "norm" is used in creativity research for the purpose of assessing creativity and is also linked to non-traditional or creative processes that lead to unique and divergent artifacts [1,2]. Using Computational Thinking Pattern Analysis (CTPA)[3], the divergence between implemented computational thinking patterns in a student-created game, and that game's tutorial "norm" is calculated as an indicator of creativity. Through a case study of one teacher using three unique learning conditions, CTPA's computed divergence is explored as a valid measurement of creativity in these student games.},
booktitle = {Proceeding of the 44th ACM Technical Symposium on Computer Science Education},
pages = {359–364},
numpages = {6},
keywords = {game design, creativity measurement, computational thinking pattern analysis, computational thinking, ACM proceedings},
location = {Denver, Colorado, USA},
series = {SIGCSE '13}
}

@inproceedings{10.1145/3311927.3323152,
author = {Troiano, Giovanni Maria and Snodgrass, Sam and Arg\i{}mak, Erin\c{c} and Robles, Gregorio and Smith, Gillian and Cassidy, Michael and Tucker-Raymond, Eli and Puttick, Gillian and Harteveld, Casper},
title = {Is My Game OK Dr. Scratch? Exploring Programming and Computational Thinking Development via Metrics in Student-Designed Serious Games for STEM},
year = {2019},
isbn = {9781450366908},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3311927.3323152},
doi = {10.1145/3311927.3323152},
abstract = {Computational thinking (CT) is key to digital literacy and helps develop problem-solving skills, which are fundamental in modern school. As game design shows potential for teaching CT, metrics like Dr. Scratch emerge that help scholars systematically assess the CT of student-designed games, particularly with Scratch. Compared to other CT metrics, Dr. Scratch scores the CT of Scratch projects automatically and can be used to describe CT development. However, previous research using Dr. Scratch summatively assessed CT, but did not look at CT development. We use Dr. Scratch to assess the CT development of Scratch games designed by 8th-grade students in STEM curricula. We show how CT proficiency in student-designed games develops differently in each CT dimension, where parallelism, synchronization, and logic develop proficiently, while developing abstraction seems hard. We discuss insights into game-based CT development for STEM, and suggest improvements for metric-based CT assessment.},
booktitle = {Proceedings of the 18th ACM International Conference on Interaction Design and Children},
pages = {208–219},
numpages = {12},
keywords = {metrics, game design, constructionist learning, assessment, Scratch, STEM, Dr. Scratch, Computational thinking},
location = {Boise, ID, USA},
series = {IDC '19}
}

