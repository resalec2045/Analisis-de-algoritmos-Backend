@inproceedings{10.1145/3649405.3659521,
author = {Wynn, Adam and Wang, Jingyun and Valente, Andrea},
title = {Simplifying Multimedia Programming for Novice Programmers: MediaLib and Its Learning Materials},
year = {2024},
isbn = {9798400706035},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649405.3659521},
doi = {10.1145/3649405.3659521},
abstract = {Beginner programmers can develop an intuitive understanding of programming by leveraging the motivating field of multimedia to visually inspect outputs and experiment with different ways to solve problems. This paper presents MediaLib, a Python library designed to facilitate multimedia programming and lessen the cognitive load associated with programming for novice programmers. In addition, we designed an official MediaLib website which contains the library itself, two tutorials, and clear documentation. The tutorial clearly presents the learning objectives of each lesson and contains exercises related to MediaLib. We designed these exercises to help students gain knowledge incrementally, without requiring in-depth maths knowledge.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 2},
pages = {785–786},
numpages = {2},
keywords = {beginners, computational thinking, library, multimedia programming, programming skills, python, teaching materials},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3649405.3659521,
    author = {Wynn, Adam and Wang, Jingyun and Valente, Andrea},
    title = {Simplifying Multimedia Programming for Novice Programmers: MediaLib and Its Learning Materials},
    year = {2024},
    isbn = {9798400706035},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3649405.3659521},
    doi = {10.1145/3649405.3659521},
    abstract = {Beginner programmers can develop an intuitive understanding of programming by leveraging the motivating field of multimedia to visually inspect outputs and experiment with different ways to solve problems. This paper presents MediaLib, a Python library designed to facilitate multimedia programming and lessen the cognitive load associated with programming for novice programmers. In addition, we designed an official MediaLib website which contains the library itself, two tutorials, and clear documentation. The tutorial clearly presents the learning objectives of each lesson and contains exercises related to MediaLib. We designed these exercises to help students gain knowledge incrementally, without requiring in-depth maths knowledge.},
    booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 2},
    pages = {785–786},
    numpages = {2},
    keywords = {beginners, computational thinking, library, multimedia programming, programming skills, python, teaching materials},
    location = {Milan, Italy},
    series = {ITiCSE 2024}
}

@inproceedings{10.1145/3605468.3609778,
author = {Bahr, Tobias},
title = {Developing a Computer Science Content Knowledge Test for 10th Grade Students},
year = {2023},
isbn = {9798400708510},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3605468.3609778},
doi = {10.1145/3605468.3609778},
abstract = {Computer Science competencies are becoming increasingly important in our current digitised society. To foster students in Computer Science, different countries have introduced subjects with new educational plans based on Computer Science frameworks, such as the K-12 CS Framework and the Informatics Reference Framework for Schools. Those include, in one way or another, four content areas: data and coding (including data structures and their applications), algorithms (involving variables, loops, and software projects), computers and networks (emphasizing the role of computers in a network and data transmission) and information society and data security (covering topics like asymmetric encryption and personal data protection). Various tests have been developed in the field of Computer Science Education for different age groups, primarily at university level for introductory Computer Science courses, and some for upper secondary school level and below, particularly for Computational Thinking. Given the research context, the objective of this study is to develop a set of items that measures the content knowledge in the four aforementioned areas. Specifically, the study focuses on the educational plan of the Computer Science subject called IMP, which is taught from the 8th to the 10th grade in secondary schools in Baden-W\"{u}rttemberg, Germany. In total, 155 items were evaluated by experts, resulting in a test consisting of 68 items. This poster abstract presents the ongoing progress of the test development.},
booktitle = {Proceedings of the 18th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {31},
numpages = {2},
keywords = {Competency, Computer Science, Content Knowledge, Expert Rating},
location = {Cambridge, United Kingdom},
series = {WiPSCE '23}
}

@inproceedings{10.1145/3456887.3456925,
author = {Meng, Ji},
title = {The Understanding and Evolution of the Construction Elements of Educational Computing Experiment},
year = {2021},
isbn = {9781450389969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456887.3456925},
doi = {10.1145/3456887.3456925},
abstract = {A unified understanding of the nature of computation-based education experiment is formed based on education experiment and computational experiment. Through a perspective analysis of the research paradigm of computation-based education experiment, the components of computation-based education experiment are identified, which are computer, network architecture, operating system, high-level programming language, intermediate data processing, external interface, and computational thinking. Their respective features are also described. The forces driving the change of these components are analyzed from two aspects: the change of educational research needs and the development of informatization. Finally, the specific changes of each component are introduced and the nature of change is summarized.},
booktitle = {2021 2nd International Conference on Computers, Information Processing and Advanced Education},
pages = {171–174},
numpages = {4},
location = {Ottawa, ON, Canada},
series = {CIPAE 2021}
}

@inproceedings{10.1145/3545945.3569738,
author = {Bockmon, Ryan and Bourke, Chris},
title = {Validation of the Placement Skill Inventory: A CS0/CS1 Placement Exam},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569738},
doi = {10.1145/3545945.3569738},
abstract = {Student success in introductory computing course continues to be a major challenge. Though there has been much research and innovation in recent years to help reduce high failure rates, a substantial population of students still struggle in a typical CS1 course. In this paper we create an argument of validity of the Placement Skills Inventory (PSIv1). The goal of the PSIv1 is to help advise and place students into an appropriate introductory computing course. While placement exams have been developed in the past, the goal of PSIv1 is to differentiate students who will be successful in a CS1 course and those that would be better served taking a CS0 course as their first computing course. In contrast, traditional placement exams have focused on differentiating students between CS1 and CS2. The PSIv1 is a combination of two instruments, the Computational Thinking Concepts and Skills Test and the Second Computer Science 1 Exam Revised Version 2. These two instruments measure students' computation thinking skills and prior programming knowledge respectively. The PSIv1 was administered to all students enrolled in either a CS0 or CS1 during the first two weeks of the semester. We use Item Response Theory to create an argument of validity of the PSIv1 and look at differences in scores on the PSIv1 based on if a student passed or failed a CS0 and CS1 course. We then used the results to create an advising strategy and criteria to help students decided if they should enroll in a CS0 or CS1 course.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {39–45},
numpages = {7},
keywords = {assessment, cs0, cs1, irt, validation},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3641555.3705048,
author = {Phelps, Victoria and Ball, Michael and Garcia, Dan and Garcia, Yuan},
title = {Snap! 10 --- From Blocks to AI: Empowering Learning with Custom Primitives and Machine Learning},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705048},
doi = {10.1145/3641555.3705048},
abstract = {This year's Snap! 10 release marks a major leap forward, bringing advanced machine learning capabilities directly into the hands of students and educators. Version 10 introduces support for building ML models, including single-layer perceptrons, making it easier than ever for students to explore AI concepts within a block-based environment. These updates are accompanied by the ability to define Snap! primitives using Snap! blocks themselves, empowering users to deeply customize and extend the language.Building on the rich foundation of previous versions, Snap! 10 also includes hundreds of improvements aimed at enhancing both the classroom and the individual learning experience. These include quality-of-life updates such as new debugging tools, dynamic runtime access via the ''this'' reporter, and expanded support for working with dictionaries and APIs.In this demo, we'll showcase the exciting new features in Snap! 10, focusing on how they can be used to engage students in advanced topics like machine learning, data science, and computational thinking. Attendees will learn how to leverage these tools to build custom experiences that meet the evolving needs of their classrooms.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1737},
numpages = {1},
keywords = {ai, block-based programming, llm, metaprogramming, programming paradigms, snap!},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3572549.3572612,
author = {Hsu, Jih-Shih and Tsai, Wen-Lung},
title = {Influence of Grouping Strategies for Cooperative Learning on the Learning Outcome of Programming Course},
year = {2023},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3572549.3572612},
doi = {10.1145/3572549.3572612},
abstract = {In recent years, programming courses has been incorporated into academic curriculums. However, as many students encounter setbacks in the learning process, this study introduces the grouping strategies for cooperation learning into programming courses, which is intended to help students improve their learning outcomes and enhance their computational thinking abilities.The subjects were 75 college students from two classes, which were divided into student-selected and heterogeneous groups, and took the experimental programming course for three weeks. The pre-test and post-test learning outcomes were validate by t-test and one-way ANOVA. This experiment aimed to understand the learning outcomes after adopting grouping strategies, as well as the learning outcomes of students with different backgrounds after adopting grouping strategies.The results showed that both student-selected grouping and heterogeneous grouping can improve the learning outcome. The learning outcome with student-selected grouping is business management background &gt; other backgrounds &gt; design background &gt; electrical engineering and computer science background. With heterogeneous grouping, the learning outcome of the design background is close to that of the electrical engineering and computer science background, and there is no significant difference among electrical engineering and computer science, business management, and other learning backgrounds. Thus, the learning outcome with heterogeneous grouping is better than that with student-selected grouping.},
booktitle = {Proceedings of the 14th International Conference on Education Technology and Computers},
pages = {393–402},
numpages = {10},
keywords = {single-factor experiment design, programming, grouping strategies, cooperative learning},
location = {Barcelona, Spain},
series = {ICETC '22}
}

@inproceedings{10.1145/3159450.3159590,
author = {Ritz, Anna},
title = {Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159590},
doi = {10.1145/3159450.3159590},
abstract = {Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {239–244},
numpages = {6},
keywords = {undergraduate education, introductory programming, computational thinking, computational biology},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3641554.3701946,
author = {Li, Nero and Broner, Shahar and Kim, Yubin and Mizuo, Katrina and Sauder, Elijah and To, Claire and Wang, Albert and Gila, Ofek and Shindler, Michael},
title = {Investigating the Capabilities of Generative AI in Solving Data Structures, Algorithms, and Computability Problems},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701946},
doi = {10.1145/3641554.3701946},
abstract = {There is both great hope and concern about the future of Computer Science practice and education concerning the recent advent of large language models (LLMs).We present the first study to extensively evaluate the ability of such a model to solve problems in Computer Science Theory. Specifically, we tested 165 exam-level problems across 16 specific topics related to computer science theory, ranging from preliminary data structures to algorithm design paradigms to theory of computation (automata and complexity). Our results use the recent popular models (GPT-4 and GPT-4o). This is a rapidly evolving field, with model performance continuously improving. We present our results primarily as an indication of what they can already achieve-equivalently how they can already be useful-today, fully expecting them to improve even further in the near future. Our results show that what was very recently a state-of-the-art model (GPT-4) can solve 77\% of free-response problems in data structures and algorithms with little to no guidance. The latest model, GPT-4o, can solve around 46\% of the Theory of Computation problems we posed, with predictable categories for which problems it could not solve. When broken down by topic, the model can solve 80\% of problems in 4 out of the 15 topics and at least half in 8 other topics. Other problems, namely more visual problems, either require more substantial coaching or seem to still be beyond the capabilities of the language model--for now. By understanding the strengths and limitations of these models for solving theory problems, we can open the door to future work, ranging from human educational assessment on the topic to automated tutors for learners of the subject.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {659–665},
numpages = {7},
keywords = {algorithm design techniques, chatgpt, computational thinking, computer-assisted instruction, data structures, generative ai, gpt-4, gpt-4o, large language models},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3677619.3677634,
author = {Repenning, Alexander and Grabowski, Susanne},
title = {Scaffolding Creative Programming Projects},
year = {2024},
isbn = {9798400710056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3677619.3677634},
doi = {10.1145/3677619.3677634},
abstract = {While most teachers welcome the idea of learning activities fostering creativity, it is not clear how to effectively scaffold creativity. Without suitable pedagogical approaches, it is difficult to provide appropriate levels of scaffolding. Over-scaffolding, on the one hand, while providing support appreciated especially by less experienced students, leaves little room for creative expression. Under-scaffolding, on the other hand, while fostering more authentic learning opportunities with a high potential for creativity, can lead to student frustration. The Process Artifact Creativity Landscape (PACL) is a framework that helps pre-service teachers scaffold creative projects. PACL consists of a two dimensional space providing four scaffolding approaches offering different tradeoffs between scaffolding and creativity. This paper introduces the PACL framework and outlines experiences with K–6 preservice teachers reasoning about scaffold creative programming projects.},
booktitle = {Proceedings of the 19th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {16},
numpages = {6},
keywords = {Computer science education, computational thinking, creativity, preservice teacher education, scaffolding},
location = {Munich, Germany},
series = {WiPSCE '24}
}

@inproceedings{10.1145/3159450.3162348,
author = {Soh, Leen-Kiat and Ingraham, Elizabeth and Shell, Duane F.},
title = {Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162348},
doi = {10.1145/3159450.3162348},
abstract = {In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include "how-to" presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1060},
numpages = {1},
keywords = {creative thinking, computational thinking, active learning},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3386201.3386213,
author = {Shaw, Fayette and Kshirsagar, Khushbu and Wendell, Kristen and Danahy, Ethan and Bernstein, Debra and Puttick, Gillian and Cassidy, Michael},
title = {Characterizing Student Artifacts in a Multi-disciplinary Biomimicry and Robotics Unit},
year = {2021},
isbn = {9781450375436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386201.3386213},
doi = {10.1145/3386201.3386213},
abstract = {As states are adopting NGSS, engineering is increasingly being integrated in K-12 science education. While middle schools have typically segregated learning by discipline, educators are recognizing the importance of making connections across STEM disciplines. This paper presents robot artifacts built by students in an interdisciplinary middle school curriculum that combines biology, engineering, and computational thinking. In this curriculum, students analyze animals and use them as inspiration to build biomimetic robots - robots inspired by animals. We characterized and classified these artifacts based on their robots' mechanical structure and biomimetic structure and motion.},
booktitle = {Proceedings of the FabLearn 2020 - 9th Annual Conference on Maker Education},
pages = {34–39},
numpages = {6},
keywords = {middle school education, educational robotics, curriculum, Biomimicry},
location = {New York, NY, USA},
series = {FabLearn '20}
}

@inproceedings{10.1145/3287324.3293765,
author = {Kite, Vance and Park, Soonhye and Wiebe, Eric},
title = {Recognizing and Questioning the CT Education Paradigm},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293765},
doi = {10.1145/3287324.3293765},
abstract = {In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of "computational thinking for everyone," and propose specific recommendations for expanding the current CT paradigm.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1286},
numpages = {1},
keywords = {computational thinking paradigm, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3173225.3173270,
author = {Bonani, Andrea and Del Fatto, Vincenzo and Gennari, Rosella},
title = {The Evolving Design of Tangibles for Graph Algorithmic Thinking},
year = {2018},
isbn = {9781450355681},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173225.3173270},
doi = {10.1145/3173225.3173270},
abstract = {Algorithmic thinking is at the core of computational thinking. Tangible interactive solutions can help children develop algorithmic thinking skills. This paper focusses on exploratory research concerning tangibles for graph algorithmic thinking for primary and middle schools. By following an action-research process, tangibles evolved through prototyping and actions-studies. The paper overviews their evolution and delves into its most recent action: an ecological study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. It ends by reflecting on results and future work.},
booktitle = {Proceedings of the Twelfth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {65–72},
numpages = {8},
keywords = {tangible design, primary school, middle school., iot, children, algorithmic thinking, action research},
location = {Stockholm, Sweden},
series = {TEI '18}
}

@inproceedings{10.1145/3649217.3653563,
author = {\v{S}v\'{a}bensk\'{y}, Valdemar and Pankiewicz, Maciej and Zhang, Jiayi and Cloude, Elizabeth B. and Baker, Ryan S. and Fouh, Eric},
title = {Comparison of Three Programming Error Measures for Explaining Variability in CS1 Grades},
year = {2024},
isbn = {9798400706004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649217.3653563},
doi = {10.1145/3649217.3653563},
abstract = {Programming courses can be challenging for first year university students, especially for those without prior coding experience. Students initially struggle with code syntax, but as more advanced topics are introduced across a semester, the difficulty in learning to program shifts to learning computational thinking (e.g., debugging strategies). This study examined the relationships between students' rate of programming errors and their grades on two exams. Using an online integrated development environment, data were collected from 280 students in a Java programming course. The course had two parts. The first focused on introductory procedural programming and culminated with exam 1, while the second part covered more complex topics and object-oriented programming and ended with exam 2. To measure students' programming abilities, 51095 code snapshots were collected from students while they completed assignments that were autograded based on unit tests. Compiler and runtime errors were extracted from the snapshots, and three measures - Error Count, Error Quotient and Repeated Error Density - were explored to identify the best measure explaining variability in exam grades. Models utilizing Error Quotient outperformed the models using the other two measures, in terms of the explained variability in grades and Bayesian Information Criterion. Compiler errors were significant predictors of exam 1 grades but not exam 2 grades; only runtime errors significantly predicted exam 2 grades. The findings indicate that leveraging Error Quotient with multiple error types (compiler and runtime) may be a better measure of students' introductory programming abilities, though still not explaining most of the observed variability.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
pages = {87–93},
numpages = {7},
keywords = {computer science education, introduction to programming, introductory programming, novice programming, programming education},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/2818314.2818328,
author = {Duncan, Caitlin and Bell, Tim},
title = {A Pilot Computer Science and Programming Course for Primary School Students},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818328},
doi = {10.1145/2818314.2818328},
abstract = {Computer Science and programming are being introduced to school curricula in many western countries in an effort to equip students with Computational Thinking skills. However, as these subjects are still relatively new to pre-tertiary education there is much investigation to be done into how best to present these topics and how to prepare teachers. In this study we focus on the presentation of topics relating to computing, Computational Thinking, and Computer Science for primary schools.We analyse English-language curricula that have been published, specifically the English, Australian and CSTA curricula for primary schools. From this we establish the main topics covered, and how they are positioned to be suitable for students from the first year of school to approximately their eighth year.We then report on a pilot study of a curriculum based on Computational Thinking; long term the study will encompass a range of topics and year levels, but the pilot focused on topics suitable for 11 to 12 year old students. Here we detail the design of this part of the curriculum, the manner of its delivery, and the experiences and observations of the generalist teacher who taught the course. Through assessment data, student responses to an attitude survey, and class observations we have evaluated the pilot curriculum. The findings of this study are being used to inform the design of a planned larger scale study.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {39–48},
numpages = {10},
keywords = {programming, primary school, curriculum, computational thinking, Algorithms},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3545947.3576345,
author = {Vandenberg, Jessica and Gupta, Anisha and Smith, Andy and ElSayed, Rasha and Fox, Kimkinyona and Hubbard Cheuoua, Aleata and Minogue, James and Oliver, Kevin and Ringstaff, Cathy and Mott, Bradford},
title = {Supporting Upper Elementary Students in Multidisciplinary Block-Based Narrative Programming},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576345},
doi = {10.1145/3545947.3576345},
abstract = {Digital storytelling, which combines traditional storytelling with digital tools, has seen growing popularity as a means of creating motivating problem-solving activities in K-12 education. Though an attractive potential solution to integrating language arts skills across topic areas such as computational thinking and science, better understanding of how to structure and support these activities is needed to increase adoption by teachers. Building on prior research on block-based programming for interactive storytelling, we present initial results from a study of 28 narrative programs created by upper elementary students that were collected in both classroom and extracurricular contexts. The narrative programs are evaluated across multiple dimensions to better understand the types of narrative programs being created by the students, characteristics of the students who created the narratives, and what types of support could most benefit the students in their narrative program construction. In addition to analyzing the student-created narrative programs, we also provide recommendations for promising system-generated and instructor-led supports.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1401},
numpages = {1},
keywords = {k-12 education, game-based learning, computer science education},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3626253.3635495,
author = {Adrion, W. Richards and Pekta\c{s}, Emrah},
title = {Evolution of an Integrated, Elementary CSforAll Curriculum},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635495},
doi = {10.1145/3626253.3635495},
abstract = {A research-practice partnership (RPP) used a teacher co-design process, supported by equity-focused professional development, to create an elementary-level curriculum that integrates content, practices, and learning progressions from state computing standards with other standards-based curricula. Most district students are part of historically marginalized groups and the RPP chose to develop an equity and inclusion-focused curriculum that would be taught in all elementary classrooms to all students. Twelve teacher teams, supported by researchers and ELL and SPED specialists, designed, piloted, and documented 23 modules of 4-8, 45-minute lessons across K-5. Early adopter teachers followed the pilots and implemented the modules in their classrooms with the goal of facilitating adoption by all elementary classroom teachers. After being interrupted by the pandemic, the RPP developed a strategy where principals in cohorts of schools agreed to collaborate with RPP school-based lead teachers to establish professional learning communities (PLCs) to support classroom implementation of the modules. Eleven schools participated in a 2021-22 cohort and nine more schools joined in 2022-23. Centering equity, PLCs, and quality module documentation and materials are key to sustaining and evolving the CSforAll curriculum. The modules were revised based on feedback obtained from ELL and SPED specialists, early adopters, teacher coordinators, researchers, and district curriculum directors. Using a large data set of meeting and classroom observation records, interviews, field notes, focus groups, surveys, and module documentation, we track the evolution of the curriculum and provide a detailed analysis of one module as an example.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1548–1549},
numpages = {2},
keywords = {computational thinking, k-5 computer science education, research-practice partnership, teacher preparation},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@article{10.1145/3656408,
author = {Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido},
title = {Automated Verification of Fundamental Algebraic Laws},
year = {2024},
issue_date = {June 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {PLDI},
url = {https://doi.org/10.1145/3656408},
doi = {10.1145/3656408},
abstract = {Algebraic laws of functions in mathematics – such as commutativity, associativity, and idempotence – are often used as the basis to derive more sophisticated properties of complex mathematical structures and are heavily used in abstract computational thinking. Algebraic laws of functions in coding, however, are rarely considered. Yet, they are essential. For example, commutativity and associativity are crucial to ensure correctness of a variety of software systems in numerous domains, such as compiler optimization, big data processing, data flow processing, machine learning or distributed algorithms and data structures. Still, most programming languages lack built-in mechanisms to enforce and verify that operations adhere to such properties. In this paper, we propose a verifier specialized on a set of fundamental algebraic laws that ensures that such laws hold in application code. The verifier can conjecture auxiliary properties and can reason about both equalities and inequalities of expressions, which is crucial to prove a given property when other competitors do not succeed. We implement these ideas in the Propel verifier. Our evaluation against five state-of-the-art verifiers on a total of 142 instances of algebraic properties shows that Propel is able to automatically deduce algebraic properties in different domains that rely on such properties for correctness, even in cases where competitors fail to verify the same properties or time out.},
journal = {Proc. ACM Program. Lang.},
month = jun,
articleno = {178},
numpages = {24},
keywords = {Algebraic Properties, Type Systems, Verification}
}

@inproceedings{10.1145/3641554.3701817,
author = {Rahimi, Masoumeh and Margulieux, Lauren E. and Anderson, Erin},
title = {CS Concepts and Contextual Factors in Integrated Computing Activities in U.S. Schools},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701817},
doi = {10.1145/3641554.3701817},
abstract = {Integrated computing uses computing tools and concepts to support learning in other disciplines while giving all students opportunities to experience computer science. Integrated computing is often motivated as a way to introduce computing to students in a low-stakes environment, reducing barriers to learning computer science, often especially for underrepresented groups. This study explored integrated computing activities implemented in US schools to examine which programming and CT concepts they teach and whether those concepts differed across contexts. We gathered data on 262 integrated computing activities from in-service K-12 teachers and 20 contextual factors related to the classroom, the teacher, and the school. Our analysis revealed that programming and CT concepts were inversely related to five contextual factors, such that factors predicting more CT concepts also predicted fewer programming concepts. These factors reflected school resources, such that wealthier schools used activities with more CT concepts and fewer programming concepts. In addition, factors related to underrepresented groups often related to fewer concepts being taught in activities. School racial composition was the only factor of the 20 that had a relationship with both types of concepts in the same direction-students from underrepresented groups used activities with fewer CT and programming concepts. Our findings suggest that, although integrated computing can potentially introduce computing to a broader audience, we must evaluate what these activities are teaching and to whom. Another primary contribution of this work is an open-access dataset about integrated computing activities, the concepts that they teach, and the contextual factors around their use.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {931–937},
numpages = {7},
keywords = {computational thinking, computing integration, cs+x, integrated computing, k-12 computer science education, survey},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/2899415.2899435,
author = {Park, Thomas H. and Kim, Meen Chul and Chhabra, Sukrit and Lee, Brian and Forte, Andrea},
title = {Reading Hierarchies in Code: Assessment of a Basic Computational Skill},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899435},
doi = {10.1145/2899415.2899435},
abstract = {One of the skills that comprise computational thinking is the ability to read code and reason about the hierarchical relationships between different blocks, expressions, elements, or other types of nodes, depending on the language. In this study, we present three new instruments for assessing different aspects of reading hierarchies in code, including vocabulary, reasoning, and fluency. One of these instruments is Nester, an interactive tool we have designed to elicit mental models about the hierarchical structure of code in computing languages ranging from HTML, CSS, and LaTeX to JavaScript and Lisp. We describe a lab study in which we administered these instruments to 24 participants with varying degrees of web development experience. We report findings from this study, including participants' ability to define, reason about, and manipulate hierarchies in code, and the errors and misconceptions that relate to them. Finally, we discuss avenues for future work.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {302–307},
numpages = {6},
keywords = {web development, program comprehension, computational thinking, assessment},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

