@inproceedings{10.1145/2676723.2677269,
author = {Basawapatna, Ashok Ram and Repenning, Alexander and Koh, Kyu Han},
title = {Closing The Cyberlearning Loop: Enabling Teachers To Formatively Assess Student Programming Projects},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2677269},
doi = {10.1145/2676723.2677269},
abstract = {Teachers are increasingly integrating game design and simulation creation projects as part of their classroom curricula. These projects have many benefits including motivating students in STEM activities and exposing students to computational thinking - a key part of upcoming science standards. However, barriers still exist to project-based computer science in a lab environment. One major issue is that, as students are creating their projects, it is extremely difficult for teachers to know how every student is progressing through a given activity and how to keep every student engaged. This paper introduces a Cyberlearning system entitled REACT (Real-Time Evaluation and Assessment of Computational Thinking) that is an initial step towards giving teachers quickly discernible real-time data corresponding to each student project. REACT provides teachers with a sortable dashboard, consisting of data from each student, that shows the characters students created and used to populate their game or simulation world as well as the semantic meaning behind what students have programmed. A feasibility test with four middle school classrooms shows that REACT helps teachers formatively assess students and provide targeted instruction to struggling individuals. Furthermore, teachers showed excitement at the summative and student self-assessment capabilities of REACT, and every teacher independently stated they would use the REACT system in subsequent end-user programming units.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {12–17},
numpages = {6},
keywords = {summative assessment, k-12 computer science education, formative assessment, end-user game and simulation design, cyberlearning, computational thinking, assessment tools},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3641554.3701896,
author = {Guzdial, Mark and Nelson-Fromm, Tamara},
title = {Designing Courses for Liberal Arts and Sciences Students Contextualized around Creative Expression and Social Justice},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701896},
doi = {10.1145/3641554.3701896},
abstract = {The goal of teaching everyone computing (explicitly including programming) predates the definition of the computer science (CS) major and even the prospect of a software development career. At the University of Michigan, we are creating courses for non-CS majors which are grounded in the computational practices of liberal arts and sciences faculty. These courses have no connection to the CS major curriculum or software development jobs. We focus here on two of the themes that those faculty valued (Computing for Expression and Computing for Justice) and the introductory courses that we designed around each theme. The courses emphasize gaining broad perspectives of computing, which serve the study of multiple disciplines. Student activities include readings, writing essays, classroom discussion, and open-ended programming homework assignments. This experience report describes our design process, the Creative Expression and Social Justice courses, and an initial evaluation of our design. Most of the programming assignments were written in the block-based programming language Snap!, with some in-class exercises using teaspoon languages. Several units ended with an ebook assignment to connect the Snap! programming to equivalent programs in Python, Processing, and SQL. Interview and survey findings suggest that students found this sequence and the courses useful, despite not counting toward a CS major or focusing on early software development skills. Students described usefulness in terms of developing general computing knowledge, preparation for a range of future careers, and introducing them to other course choices.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {423–429},
numpages = {7},
keywords = {computational literacy, computational science, computational thinking, critical computing, cs for all, digital humanities, liberal arts and sciences},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/2532333.2532345,
author = {Van Camp, Robert},
title = {Alice Summer Camps: Evaluating Multiple Formats},
year = {2013},
isbn = {9781450322508},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2532333.2532345},
doi = {10.1145/2532333.2532345},
abstract = {During the summer of 2009, an Alice camp was taught to gifted students in our region. The following year our department secured an NSF CPATH Grant for Computational Thinking, grant number 0939106. In 2010 we hosted two weeks of our Adventures with Alice Programming and Computational Thinking camp, the first week with middle school students and the second with high school students. In both 2011 and 2012, we hosted one week of a combined middle school/high school camp. A general description of what we did in the camp will also be part of the poster presentation along with what we believe worked well and what could be improved.},
booktitle = {Proceedings of Alice Symposium on Alice Symposium},
articleno = {16},
numpages = {1},
keywords = {K-12 Education, Computational Thinking, Camps, Alice},
location = {Durham, NC, USA},
series = {ALICE '13}
}

@inproceedings{10.1145/3689050.3704795,
author = {Ranjan, Krithik},
title = {Tangible Interfaces for Computational Tinkering},
year = {2025},
isbn = {9798400711978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689050.3704795},
doi = {10.1145/3689050.3704795},
abstract = {Tangible interfaces have become integral to human-computer interaction, especially in educational settings that offer engaging ways for learners to interact with digital technology. This paper explores the landscape of tangible interfaces for computational tinkering—tools and interfaces that empower learners to engage with computational experiences in a playful and open-ended format. In this preliminary work for the Graduate Student Consortium, I examine a set of these projects through the lenses of context, tangibility, expressivity, and materiality, and seek to develop a rich classification and research goals from the insights. This paper also presents two of my projects in this space.},
booktitle = {Proceedings of the Nineteenth International Conference on Tangible, Embedded, and Embodied Interaction},
articleno = {125},
numpages = {6},
keywords = {Tangible Interaction, TUI, Tinkering, Children, Computational Tinkering, Open-ended learning},
location = {
},
series = {TEI '25}
}

@inproceedings{10.1145/3470716.3470718,
author = {Guo, Fen and Bing Yu, Jun and Xin Liu, Xin and Xu, Ke},
title = {The Construction and Practice of the Blended Teaching Mode on College Computer-common Courses},
year = {2021},
isbn = {9781450389488},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3470716.3470718},
doi = {10.1145/3470716.3470718},
abstract = {Investigating the current college computer-common class teaching in South China University of Technology (SCUT), it's indicated that although the online and offline blended teaching was practiced, there's still a lack of classroom interaction and hierarchical teaching. So high-quality teaching needs a reform of teaching mode urgently. In order to improve the teaching quality of computer-common class, an online and offline blended teaching mode with the integration of three supports, three concepts and three stages is proposed, analyzing the characteristics of learners and constructing online courses. The three concepts are "student-centered", "teaching practice as the key point" and " focusing on students' learning process " respectively. With the supports of teaching, management and evaluation, a three-stage teaching process is designed, which consists of pre-class preparation, the teaching activities based on flipped classroom and the evaluation. This study took the course: "Multimedia Technology and Application (MTA)", as an example to carry out this blended teaching mode in SCUT from 2017 to 2019. The results implied that this model had promoted students' participation and interest in learning, improved the achievement of course objectives and teaching quality, and boost students' computational thinking ability and information literacy.},
booktitle = {Proceedings of the 6th International Conference on Information and Education Innovations},
pages = {6–11},
numpages = {6},
keywords = {online and offline, flipped classroom, blended teaching},
location = {Belgrade, Serbia},
series = {ICIEI '21}
}

@inproceedings{10.1145/3408877.3439658,
author = {Johnson, Andrea E.},
title = {To GitHub or Not to GitHub?},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3439658},
doi = {10.1145/3408877.3439658},
abstract = {While preparing students for careers upon graduation, faculty often have to manage the priorities of bridging the gap between the level of student preparation and the expected level of preparedness. The prioritization of these tasks is influenced by discipline and industry specific guidelines and does not always align with the experience of students at Historically Black College and Universities (HBCU) and Minority Serving Institutions (MSI). The Association of Computing Machinery (ACM) 2013 Computer Science Curricula guidelines highlight version control as one of many core tools in the Social Issues and Professional Practice (SP) Knowledge Area students should experience in their upper-level software engineering courses. Research has demonstrated that at this level, students receive exposure to the tool but are not able to gain sufficient mastery of the tool. Other researchers have advocated for version control being introduced earlier in the computer science curricula. There is limited research that indicates that this particular tool improves the learning outcomes for students or significantly complements the other ACM Knowledge Areas. This presentation seeks to challenge the notion that the use of version control systems improves HBCU students' computational thinking (CT) skills and in turn prepares them for careers beyond graduation. It is important to note, there is no research that directly addresses the use of version control in predominately African American classrooms.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {1331},
numpages = {1},
keywords = {version control systems, programming education, github, computing education},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3510456.3514155,
author = {Groher, Iris and Vierhauser, Michael and Sabitzer, Barbara and Kuka, Lisa and Hofer, Alexander and Muster, David},
title = {Exploring diversity in introductory programming classes: an experience report},
year = {2022},
isbn = {9781450392259},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3510456.3514155},
doi = {10.1145/3510456.3514155},
abstract = {Digitization is becoming part of almost everyone's life, ranging from smartphones and tablets, smart devices automatically collecting information, to tools and scripting languages that are widely available and easy to use. This has recently been reflected in various university curricula, where courses such as computational thinking, and basic programming classes are now included in a broader range of (non-computer-science) programs. However, these programs often face challenges in such courses due to their diverse student body, with students often lacking profound digital competencies and technical background. While gender diversity aspects have been broadly studied in the past, other diversity dimensions such as ethnicity, age, or educational background have largely been neglected thus far. In this paper, we report on our experiences in teaching an introductory programming course to first-year Business Informatics bachelor students. After undergoing fundamental changes in our teaching concepts and the provided learning material, we explore what diversity factors play an important role when teaching programming to non-computer science students, and how diversity is perceived by lecturers and tutors. Our analysis confirms that a collaborative teaching concept positively supports female students and students with language barriers.},
booktitle = {Proceedings of the ACM/IEEE 44th International Conference on Software Engineering: Software Engineering Education and Training},
pages = {102–112},
numpages = {11},
keywords = {introductory programming, diversity dimensions},
location = {Pittsburgh, Pennsylvania},
series = {ICSE-SEET '22}
}

@inproceedings{10.1145/3342428.3342666,
author = {Gaggi, Ombretta and Petenazzi, Giulia},
title = {A digital platform for teaching mathematics},
year = {2019},
isbn = {9781450362610},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3342428.3342666},
doi = {10.1145/3342428.3342666},
abstract = {In this paper, we present a complete platform for an innovative way to teach mathematics. The platform is composed of a serious game to help children to understand fractions, and a web portal that allows teachers to configure exercises involving fractions, but also to design completely new exercises using a very simple block-based programming language. In this way our tool can be used by primary school teachers as an help to teach mathematics, but also secondary or high schools teachers to teach students computational thinking and basic skills of programming languages.},
booktitle = {Proceedings of the 5th EAI International Conference on Smart Objects and Technologies for Social Good},
pages = {37–42},
numpages = {6},
keywords = {Teaching Mathematics, Serious Games, Mobile Applications, Block-based language},
location = {Valencia, Spain},
series = {GoodTechs '19}
}

@inproceedings{10.1145/3516875.3516899,
author = {Andi Rachman, Taofik and Latipah, Euis and Zaqiah, Qiqi Yuliati and Erihadiana, Mohamad},
title = {Curriculum Innovation to Improve Indonesian Education in PISA International Assessment in Disruptive Education Era},
year = {2022},
isbn = {9781450386920},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3516875.3516899},
doi = {10.1145/3516875.3516899},
abstract = {Indonesia has always failed in its PISA international assessment. Although there have been improvement efforts, it has not shown a significant increase in score. The latest PISA results still put Indonesia at its lowest. The OECD as the organizer of PISA encourages curriculum changes to Indonesia in order to create a quality of international level education. In this era of globalization, education requires innovation to develop the necessary competencies in the global world. The purpose of this research describes several curriculum innovations for elementary school and junior high school based on several research, expert opinion and world experience. This research uses library research method. The data is compiled, analyzed, and concluded so as to get an overview of curriculum innovations that are in accordance with the development in the disruptive era without forgetting to be the nation that upholds religion and character. This research proposes several curriculum innovations that can be done, namely simplification of curriculum, implementing disruptive education, improving innovation skill, applying education technology widely, applying PISA assessment in daily evaluation, strengthening religious education and character and applying scientific and computational thinking. So, with this curriculum innovation, it will have a positive impact on the development of Indonesian education.},
booktitle = {Proceedings of the 5th International Conference on Learning Innovation and Quality Education},
articleno = {19},
numpages = {8},
keywords = {disruptive education, PISA, Indonesian education, Curriculum innovation},
location = {Surakarta, Indonesia},
series = {ICLIQE '21}
}

@inproceedings{10.1145/3641555.3704769,
author = {Sussman, Alan and Prasad, Sushil and Bunde, David P. and Spacco, Jaime and Gannod, Gerald and Crockett, April Renee and Vaidyanathan, Ramachandran},
title = {Modernizing the CS Introductory Sequence with Parallel and Distributed Computing (and some AI)},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3704769},
doi = {10.1145/3641555.3704769},
abstract = {Parallel and distributed computing (PDC) has become pervasive in all aspects of computing, so it is essential that students include parallelism and distribution in the computational thinking that they apply to problem solving, from the beginning of their computing education. With all computing devices that students use having multiple cores as well as a GPU in many cases, many students' favorite applications use multiple cores and/or distributed processors. However, we are still teaching them to solve problems using only sequential thinking. Why?This hands-on tutorial will demonstrate how easy it is to open students' eyes to exploiting concurrency in problem solving. You will participate in plugged and unplugged activities that will help students to recognize examples of PDC concepts and concurrency in the world around them. We introduce plugged and unplugged curriculum modules that have been successfully integrated in existing computing classes at multiple institutions. We will also discuss recent efforts at integrating AI methods, including LLMs, into introductory classes.A laptop capable of running a C/C++ compiler, a Java virtual environment, and a Python interpreter is needed to fully participate in activities. However, attendees may learn the core concepts without a laptop. The activities and curriculum modules have been used successfully to teach PDC concepts in early computing courses and will be available after the workshop. Participants will receive a stipend of 400 to defray their cost of registration and one-night hotel stay. The CDER center will also have a booth in the exhibition hall for additional support.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1775},
numpages = {1},
keywords = {acm/ieee-cs/aaai computer science curricula, ai, computing education, cs1/ cs2, early computing class, hpc education, undergraduate instruction, pdc education},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3357236.3395555,
author = {Mikkonen, Jussi and Fyhn, Christina},
title = {Storycoding - Programming Physical Artefacts for Research Through Design},
year = {2020},
isbn = {9781450369749},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357236.3395555},
doi = {10.1145/3357236.3395555},
abstract = {Making programmable physical artefacts and prototypes has inherent value for Research-through-Design (RtD) based HCI. Furthermore, the abstractions and representations within RtD and programming are vastly different, such as between observations, storyboards and the code. Studies have shown that the program of an artefact influences the RtD outcome, but there is also a disconnect between the observations of use and the abstractions involved in the programming. How can we program an artefact so that the code can be created, modified and reflected upon based on directly observable and non-technical abstractions? In this paper we present Storycoding, a computational-thinking based method for programming that focuses on bridging the representational abstractions. Using Storycoded artefacts, we examine programming in light of RtD. We discuss how Storycoding enables programming that is directly observable between the use and the abstractions, being respectful towards RtD. Finally, we conclude with implications towards HCI research and practice.},
booktitle = {Proceedings of the 2020 ACM Designing Interactive Systems Conference},
pages = {441–455},
numpages = {15},
keywords = {research through design, programming, human-computer interaction, computational behaviour, artefact behaviour},
location = {Eindhoven, Netherlands},
series = {DIS '20}
}

@inproceedings{10.1145/2462476.2465574,
author = {Scott, Jeremy},
title = {The royal society of Edinburgh/British computer society computer science exemplification project},
year = {2013},
isbn = {9781450320788},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462476.2465574},
doi = {10.1145/2462476.2465574},
abstract = {In August 2011, Google Chairman Eric Schmidt came to Scotland and expressed great concern at the state of Computer Science (CS) education in the UK's schools. This was a timely intervention: in Scotland, a new national curriculum is providing an opportunity to cement CS and computational thinking firmly within the curriculum and reverse a recent decline in uptake. To support teachers delivering this new curriculum and to provide students with an experience of CS that is accessible and exciting, the Royal Society of Edinburgh (RSE) and British Computer Society (BCS) have commissioned three extensive resources that seek to deliver CS in a way that is relevant to students' own digital lives. These use a range of pedagogical approaches to teach computational thinking and enable meaningful interdisciplinary learning -- a cornerstone of Scotland's new curriculum.},
booktitle = {Proceedings of the 18th ACM Conference on Innovation and Technology in Computer Science Education},
pages = {315},
numpages = {1},
keywords = {secondary school, programming, education, computer science, computational thinking},
location = {Canterbury, England, UK},
series = {ITiCSE '13}
}

@inproceedings{10.1145/3291279.3339444,
author = {Pena, Joslenne},
title = {Seeding the Computational Skills of Diverse Non-programmers through Non-formal Workshops},
year = {2019},
isbn = {9781450361859},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3291279.3339444},
doi = {10.1145/3291279.3339444},
abstract = {Non-programmers, in particular, those who identify as female or gender-diverse, experience many factors that hinder their ultimate interest, participation, and success in programming. Prior work has delved into the problem of underrepresentation in STEM and specifically in Computing Education to uncover the barriers impacting these groups. Yet, attraction and retention remains a challenge. I argue that while formal learning pathways are critical to increasing participation of diverse learners, it is also integral to provide informal and non-formal learning opportunities as well. My research uses mixed-methods within a design-based research approach to offer and evaluate an active learning beginners' programming workshop called Code For Her. The workshop is designed to introduce females and gender-diverse individuals to web development. My goal is to analyze participants' experiences and progress within a trajectory framework, producing a narrative of their behaviors and attitudes over both short-term and longer-term intervals. In a pilot study of the workshop design, I observed increases in self-efficacy and positive attitudes, as well as changes in ways of thinking about computing. I note that the brief exposure of a workshop may seed understanding and skills in computation, but is not likely to convert non-programmers into programmers. Instead, I am exploring a new construct - computational grounding - that refers to participants' enhanced orientation toward computing-related behaviors. I will operationalize and study this construct using the workshop activities, thereby enhancing discussions of computational thinking.},
booktitle = {Proceedings of the 2019 ACM Conference on International Computing Education Research},
pages = {347–348},
numpages = {2},
keywords = {non-programmers, informal learning, gender, coding workshop},
location = {Toronto ON, Canada},
series = {ICER '19}
}

@article{10.1145/3084688,
author = {Tichy, Walter},
title = {Is quantum computing for real? an interview with Catherine McGeoch of D-Wave Systems},
year = {2017},
issue_date = {July 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2017},
number = {July},
url = {https://doi.org/10.1145/3084688},
doi = {10.1145/3084688},
abstract = {In this interview, computer scientist Catherine McGeoch demystifies quantum computing and introduces us to a new world of computational thinking.},
journal = {Ubiquity},
month = jul,
articleno = {2},
numpages = {20}
}

@inproceedings{10.1145/2676723.2691878,
author = {Fordham, Eileen and Freger, Halley and Hinchman-Dominguez, Amanda and Mitchell, Alexander and Rebelsky, Daniel and Tsou, Victoria and Wheeler, Earnest and Wolter, Zoe and Rebelsky, Samuel A.},
title = {MIST, The Mathematical Image Synthesis Toolkit},
year = {2015},
isbn = {9781450329668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2676723.2691878},
doi = {10.1145/2676723.2691878},
abstract = {MIST, the Mathematical Image Synthesis Toolkit, is an open-source, Web-based graphics application in which students develop skills in computational thinking and deepen their understanding of mathematical functions through creative play in making images. Using a drag-and-drop interface, students build functions that describe animated abstract images. These functions combine a few basic images (e.g., a horizontal blend, a vertical blend, and a time-based blend) using mathematical operators whose semantics are based on corresponding points in each image (e.g., MIST includes models for adding and multiplying colors). Students develop a variety of skills in computational thinking by using the small set of images and operations to develop complex images, not only images that the system challenges them to make but also images that they find themselves inspired to create and even images that their peers challenge them to build. MIST also incorporates a community of artists/learners. Images created in MIST are available to other MIST users to comment on and remix (provided the designer permits reuse). MIST community members may also create challenges for other community members and can curate "galleries" of images they find particularly engaging, interesting, or even useful as challenges for others. Users can also share their images via Facebook or "tweet" their recent creations. We find that this additional community further encourages students to develop new and interesting images.},
booktitle = {Proceedings of the 46th ACM Technical Symposium on Computer Science Education},
pages = {599},
numpages = {1},
keywords = {web software, social media, open source, functional programming, computational thinking, animation},
location = {Kansas City, Missouri, USA},
series = {SIGCSE '15}
}

@inproceedings{10.1145/3017680.3022469,
author = {Aggarwal, Ashish},
title = {Neo-Piagetian Classification of Reasoning Ability and Mental Simulation in Microsoft's Kodu Game Lab},
year = {2017},
isbn = {9781450346986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3017680.3022469},
doi = {10.1145/3017680.3022469},
abstract = {Over the past five years, there has been a major push to develop the computational thinking skills of K-12 students. Tools such as Scratch, Alice, and Kodu have been developed to engage students in learning to program through the creation of computational artifacts (e.g., games, animations, and stories). However, less is known about how elementary and middle school children reason about program behavior. Such skills are useful for reading and adapting others programs, locating possible sources of bugs, and predicting program behavior given code snippets (i.e., mental simulation). The goal of this poster is to measure and track the development of students' ability to reason about programs using Teague \&amp; Lister's Neo-Piagetian classification of novice programmers: Sensorimotor, Preoperational Thinkers, and Concrete Operational Thinkers. We operationalize Teague and Lister's category descriptions by creating a criterion for each category. This classification has helped us characterize students' mastery of strategies for reasoning about the lawful behavior of programs using a Kodu curriculum. In particular, this categorization was used to differentiate students' reasoning styles using data from two studies having 20 and 19 students each. We found strong consistency in the results across both studies. Through analysis and categorization of student responses, most students fall into the preoperational thinker category. Within this category, we found a diversity of mastery patterns that help us understand where students face challenges in reasoning about programs.},
booktitle = {Proceedings of the 2017 ACM SIGCSE Technical Symposium on Computer Science Education},
pages = {745–746},
numpages = {2},
keywords = {reasoning ability, neo-piagetian, mental simulation, lawfulness, kodu, computational thinking, K-12},
location = {Seattle, Washington, USA},
series = {SIGCSE '17}
}

@inproceedings{10.1145/3421590.3421594,
author = {Guo, Meize and Ottenbreit-Leftwich, Anne},
title = {Exploring the K-12 computer science curriculum standards in the U.S},
year = {2020},
isbn = {9781450387590},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3421590.3421594},
doi = {10.1145/3421590.3421594},
abstract = {In order to create early exposure and to guide more talent into computing, computer science was included in K-12 education as a new subject area in many states. Although each state has different educational goals, computer science curriculum standards ensure equality among the states, especially in guiding teaching and accessing students' achievements. In this study, we applied content analysis to investigate the published computer science standards to examine: (1) How did computer science standards fit within the whole curriculum? (2) What concepts were covered in the computer science standards in the U.S.? The results showed four approaches to housing computer science in the whole curriculum. The Computer Science Teachers Association Computer Science framework was broadly adopted. Moreover, three major concepts, computer literacy, digital citizenship, and computational thinking, were additionally emphasized at the state standard level. This study fundamentally reported K-12 CS promotion in the U.S. through an academic standard scope, which directs K-12 CS teaching and learning. Additionally, this study prompted a conversation of preparing for different kinds of computing skills at the K-12 level in the U.S. among the policy makers and scholars},
booktitle = {Proceedings of the 15th Workshop on Primary and Secondary Computing Education},
articleno = {6},
numpages = {6},
keywords = {curriculum standards, computer science education, computer science concepts, K-12 computer science},
location = {Virtual Event, Germany},
series = {WiPSCE '20}
}

@inproceedings{10.1145/3012430.3012498,
author = {Gonzalez-Sacristan, Carlos and Garcia-Saura, Carlos and Molins-Ruano, Pablo},
title = {Phogo: A low cost, engaging and modern proposal to learn how to program},
year = {2016},
isbn = {9781450347471},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3012430.3012498},
doi = {10.1145/3012430.3012498},
abstract = {Basic computational thinking, so necessary in today's society, can be learned in an engaging way with the use of educational robots. In order to reach very diverse groups of people, educational robots need to be simple, scalable and low cost.Inspired by the success of the LOGO project, we have developed the Phogo pedagogical platform, built around a low cost robot (less than $80) capable of tracing its path with a marker pen. We also present a high-level Python-based control library that allows for transparent and easy wireless communication with the robots. The approach was tested in an informal workshop with a group of teenagers without any previous self-conscious computational knowledge. As the students were attracted by the robot and the simple approach, they were able to gain some insight about abstract programming concepts such as variables, functions, and flow control structures. The majority of the students were people with physical, cognitive or intellectual disabilities and they were able to follow, enjoy and learn as any other student making this an accessible activity to everyone.Finally, we summarize our efforts documenting and publishing the Phogo system as open-source in order to promote its use in future workshops.},
booktitle = {Proceedings of the Fourth International Conference on Technological Ecosystems for Enhancing Multiculturality},
pages = {67–71},
numpages = {5},
keywords = {robotic platform, open-source, low cost, educational robots, computational thinking, Python, LOGO, 3d-printing},
location = {Salamanca, Spain},
series = {TEEM '16}
}

@inproceedings{10.1145/3213818.3213844,
author = {Lupetti, Maria Luce and Cangiano, Serena and Ermacora, Gabriele and Russo, Ludovico Orlando and Riesen, Cristina},
title = {Open resources for thinking with computational artefacts at school},
year = {2018},
isbn = {9781450353717},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3213818.3213844},
doi = {10.1145/3213818.3213844},
abstract = {This workshop will address the theme of open resources for learning. A small series of case studies at the intersection between the world of education, technology, and making will be presented with the aim of discussing the opportunities and challenges of open source materials for practitioners. The case studies consist of projects developed across different European countries, focused on different aspects of learning and dedicated to different school levels. Nevertheless, these projects share the use of open source resources and the aim of contributing with materials and examples to the resources available for educators and designers. The workshop will combine the case studies presentations with a round table.},
booktitle = {Proceedings of the Conference on Creativity and Making in Education},
pages = {116–117},
numpages = {2},
keywords = {reflective thinking, open-source, learning through play, digital fabrication, Computational thinking},
location = {Trondheim, Norway},
series = {FabLearn Europe'18}
}

@inproceedings{10.1145/3159450.3159529,
author = {McGee, Steven and McGee-Tekula, Randi and Duck, Jennifer and McGee, Catherine and Dettori, Lucia and Greenberg, Ronald I. and Snow, Eric and Rutstein, Daisy and Reed, Dale and Wilkerson, Brenda and Yanek, Don and Rasmussen, Andrew M. and Brylow, Dennis},
title = {Equal Outcomes 4 All: A Study of Student Learning in ECS},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159529},
doi = {10.1145/3159450.3159529},
abstract = {This study investigated patterns in the development of computational thinking practices in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Past research indicates that the personal relevance of the ECS experience influences students' expectancy-value towards computer science. Expectancy-value is a construct that is predictive of career choices. We extended our research to examine whether expectancy-value influences the development of computational thinking practices. This study took place in the context of two ECS implementation projects across two states. Twenty teachers, who implemented ECS in 2016-17, participated in the research. There were 906 students who completed beginning and end of year surveys and assessments. The surveys included demographic questions, a validated expectancy-value scale, and questions about students' course experiences. The assessments were developed and validated by SRI International as a companion to the ECS course. Overall, student performance statistically increased from pretest to posttest with effect size of 0.74. There were no statistically significant differences in performance by gender or race/ethnicity. These results are consistent with earlier findings that a personally relevant course experience positively influences students' expectancy for success. These results expanded on prior research by indicating that students' expectancy-value for computer science positively influenced student learning.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {50–55},
numpages = {6},
keywords = {high school computer science, exploring computer science, expectancy-value-cost, computer science teaching practices, computer science attitudes, computer science assessment},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

