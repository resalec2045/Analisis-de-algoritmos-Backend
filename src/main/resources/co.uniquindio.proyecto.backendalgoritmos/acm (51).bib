@inproceedings{10.1145/3491101.3519866,
author = {Polak, Sara and Schiavo, Gianluca and Zancanaro, Massimo},
title = {Teachers’ Perspective on Artificial Intelligence Education: an Initial Investigation},
year = {2022},
isbn = {9781450391566},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3491101.3519866},
doi = {10.1145/3491101.3519866},
abstract = {Learning about Artificial Intelligence (AI) from a young age can help students become competent citizens able to move through our increasingly digital world with confidence and responsibility. This contribution presents a preliminary investigation in Bulgaria, Greece, Italy, and Romania to understand middle school teachers’ perspective on how to best teach digital competencies for AI. It uses the Will, Skill, Tool model as a theoretical lens, and it aims to inform the design of educational content and online platforms to enable teachers to integrate AI education into their classroom. Through a human-centred design process – including focus groups and a survey – needs and requirements were identified for a supportive online educational platform that aids teachers in AI education. The research results showed a positive attitude towards AI education and high motivation to introduce AI-related content at school, which translates to a positive Will factor. Regarding the Skill factor, teachers seem to have a basic level of digital skills but low AI-related skills. No significant problems emerged regarding the availability of resources, but further research investigating whether the Tool factor is accounted for would be desirable. Based on the results, six design implications for a web-based educational platform on AI have been formulated: (i) provide the required basics; (ii) make it relevant; (iii) make it interactive and collaborative; (iv) keep everyone in the loop; (v) make it accessible; (vi) motivate the user. These implications are further discussed to extend computational thinking frameworks to incorporate AI-related concepts and perspectives.},
booktitle = {Extended Abstracts of the 2022 CHI Conference on Human Factors in Computing Systems},
articleno = {431},
numpages = {7},
keywords = {AI Education, Computing education, Digital Competencies},
location = {New Orleans, LA, USA},
series = {CHI EA '22}
}

@inproceedings{10.1145/3374920.3374980,
author = {Matthews, Sarah and Viller, Stephen and Boden, Marie A.},
title = {"... and we are the creators!" Technologies as Creative Material},
year = {2020},
isbn = {9781450361071},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3374920.3374980},
doi = {10.1145/3374920.3374980},
abstract = {Tangible embedded technology kits are increasingly being used in schools, often as a means of providing students a platform for problem solving and computational thinking. When they are incorporated in creative tasks such as open-ended design projects, embedded technologies take on the role of a design material - a medium for exploration, iteration and creation. This paper presents some early results of a video analysis of school children's collaborative interactions with tangible, embedded technologies in an open-ended design task. We identify some of the difficulties students encounter and some of the practices they develop with these kits as they work to progress their designs. Our findings detail how children deal with the opacity of the system and how they use it as a springboard for imagination. Our study provides an opportunity to reflect on how technology kits currently resist becoming a design material.},
booktitle = {Proceedings of the Fourteenth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {511–518},
numpages = {8},
keywords = {creativity, design, design material, education, tangible technologies},
location = {Sydney NSW, Australia},
series = {TEI '20}
}

@inproceedings{10.1145/1953163.1953314,
author = {Pulimood, Sarah Monisha and Shaw, Donna and Lounsberry, Emilie},
title = {Gumshoe: a model for undergraduate computational journalism education},
year = {2011},
isbn = {9781450305006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1953163.1953314},
doi = {10.1145/1953163.1953314},
abstract = {This paper describes a collaboration between computer science and journalism students and professors at our small, primarily undergraduate college, and a large metropolitan newspaper. Our students' work was a catalyst for a hard-hitting series of investigative stories, with far-reaching consequences. The Gumshoe project is a model for computational journalism at an undergraduate institution. The project demonstrates that when computer scientists and journalists reach out across disciplinary boundaries, computational thinking and collaboration can solve a real problem, and have a substantive impact on society.},
booktitle = {Proceedings of the 42nd ACM Technical Symposium on Computer Science Education},
pages = {529–534},
numpages = {6},
keywords = {computational thinking, computer aided reporting (CAR), computer science education, database systems, interdisciplinary collaboration, journalism education},
location = {Dallas, TX, USA},
series = {SIGCSE '11}
}

@inproceedings{10.1145/3628516.3663348,
author = {Fernandez, Cassia and Blikstein, Paulo and Lopes, Roseli De Deus Lopes},
title = {Design failures in data visualization programming activities},
year = {2024},
isbn = {9798400704420},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3628516.3663348},
doi = {10.1145/3628516.3663348},
abstract = {In this pictorial, we critically analyze how students engaged in data representation activities using PlayData, a block-based programming environment tailored for data visualization purposes. Drawing upon data collected over two years with middle and high school students, we describe obstacles that impacted the interpretation of the data under analysis. These obstacles, here called "design failures", arose from either unexpected uses of the tool or shortcomings in the design of activities. We explore how each of these failures was used as an opportunity for refining both the tool's design and the associated activities. We conclude by offering recommendations for educators and researchers to support learners' engagement with visualization construction for effective reasoning with data.},
booktitle = {Proceedings of the 23rd Annual ACM Interaction Design and Children Conference},
pages = {574–586},
numpages = {13},
keywords = {Authors Keywords data science education, block-based programming environments, computational thinking, data visualization, design-based research},
location = {Delft, Netherlands},
series = {IDC '24}
}

@inproceedings{10.1145/3202185.3210784,
author = {Jin, Qiao and Wang, Danli and Deng, Xiaozhou and Zheng, Nan and Chiu, Steve},
title = {AR-maze: a tangible programming tool for children based on AR technology},
year = {2018},
isbn = {9781450351522},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3202185.3210784},
doi = {10.1145/3202185.3210784},
abstract = {Programming is an effective way to foster children's computational thinking. We present AR-Maze, which is a novel tangible programming tool using Augmented Reality (AR) technology for young children. AR-Maze superposes constant feedback on the physical world and maintains a positive, low-cost learning environment. Using this system, children could create their own programs by arranging programming blocks and debug or execute the code with a mobile device. In addition, they will be able to learn fundamental programming concepts, such as parameters, loop logic, debug, etc. We design and implement this system, as well as conduct a preliminary user study and analyze the results, which can guide a better design of AR-Maze. With this work, we intend to help children programming in an interesting and intuitive way.},
booktitle = {Proceedings of the 17th ACM Conference on Interaction Design and Children},
pages = {611–616},
numpages = {6},
keywords = {augmented reality, children, edutainment, programming languages, tangible programming},
location = {Trondheim, Norway},
series = {IDC '18}
}

@article{10.1145/3484495,
author = {Lee, Clifford H. and Gobir, Nimah and Gurn, Alex and Soep, Elisabeth},
title = {In the Black Mirror: Youth Investigations into Artificial Intelligence},
year = {2022},
issue_date = {September 2022},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {22},
number = {3},
url = {https://doi.org/10.1145/3484495},
doi = {10.1145/3484495},
abstract = {Over the past two decades, innovations powered by artificial intelligence (AI) have extended into nearly all facets of human experience. Our ethnographic research suggests that while young people sense they can't “trust” AI, many are not sure how it works or how much control they have over its growing role in their lives. In this study, we attempt to answer the following questions: (1) What can we learn about young people's understanding of AI when they produce media with and about it? and (2) What are the design features of an ethics-centered pedagogy that promotes STEM engagement via AI? To answer these questions, we co-developed and documented three projects at YR Media, a national network of youth journalists and artists who create multimedia for public distribution. Participants are predominantly youth of color and those contending with economic and other barriers to full participation in STEM fields. Findings showed that by creating a learning ecology that centered the cultures and experiences of its learners while leveraging familiar tools for critical analysis, youth deepened their understanding of AI. Our study also showed that providing opportunities for youth to produce ethics-centered interactive stories interrogating invisibilized AI functionalities, and to release those stories to the public, empowered them to creatively express their understandings and apprehensions about AI.},
journal = {ACM Trans. Comput. Educ.},
month = oct,
articleno = {25},
numpages = {25},
keywords = {Critical pedagogy, artificial intelligence, ethics-centered, engagement, agency, computational thinking, machine learning, media}
}

@article{10.5555/3344013.3344022,
author = {Cao, Fei and Ding, Dabin and Zhu, Michelle},
title = {Introducing fundamental computer science concepts through game design},
year = {2019},
issue_date = {April 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {34},
number = {4},
issn = {1937-4771},
abstract = {Understanding fundamental Computer Science (CS) concepts and nurturing computational thinking skills are essential to learning to solve various science and engineering problems. However, many computer science curricula, especially in the early college years, do not provide students with an engaging and fun learning environment especially for traditionally underrepresented minorities in CS. Meanwhile, educational games have become an important teaching tool in a wide variety of disciplines. We plan to integrate CS concepts and skills such as debugging, data structure, and parallel and distributed computing concepts into our game design courses. Our experiences indicate that (1) students tirelessly strive to understand the CS concepts in order to design game challenges and (2) the virtual reality (VR) immersion experience is enormously engaging and fun.},
journal = {J. Comput. Sci. Coll.},
month = apr,
pages = {90–96},
numpages = {7}
}

@inproceedings{10.1145/3102071.3116225,
author = {Fowler, Allan},
title = {Engaging young learners in making games: an exploratory study},
year = {2017},
isbn = {9781450353199},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3102071.3116225},
doi = {10.1145/3102071.3116225},
abstract = {There has some initial work on using game play and game development to engage young children in STEM learning [5, 22, 23]. However, there not been a lot of recent work on using game development to engage young children in improving computational thinking. In this paper, the author provides an overview of an exploratory study of a group of forth grade and a group of fifth grade students during summer 2017. Both groups of students used a free game development platform from Microsoft (Kodu Game Lab) to make computer games. The results found that the participants in both camps demonstrated significant changes in attitudes and perceptions of CS.},
booktitle = {Proceedings of the 12th International Conference on the Foundations of Digital Games},
articleno = {65},
numpages = {5},
keywords = {STEM, computer games, education, young children},
location = {Hyannis, Massachusetts},
series = {FDG '17}
}

@inproceedings{10.1145/3371647.3372204,
author = {Klement, Milan and Dragon, Tom\'{a}\v{s}},
title = {Preferences of IT Teachers Related to the Implementation of the Thematic Unit of Algorithmization and Programming into the Teaching},
year = {2020},
isbn = {9781450372251},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3371647.3372204},
doi = {10.1145/3371647.3372204},
abstract = {The development and incorporation of the concept of developing pupils' computational thinking into the curriculum of IT subjects is one of the major challenges which the Czech school system is currently facing. Although there is a prevailing opinion about the need to innovate the curriculum of IT subjects in the professional community, the way to achieve it is still not fixed and many discussions about its form are being led. In this discussion, the view that the main tool for further development in this area is the introduction of a compulsory thematic unit focusing on the teaching of Algorithmization and Programming, which is to become a major cross-cutting theme across the individual age categories of pupils and students, is increasingly resonating. When implementing the innovated curriculum of IT subjects, it is necessary to take into account also the preferences and opinions of the key players-IT teachers who will implement the teaching of the newly introduced thematic unit. So, what are the preferences of IT teachers in the case of the introduction of a new thematic unit of Algorithmization and Programming into teaching? This is one of the questions we have been trying to find an answer to using the conducted research survey, whose course and results are presented in this paper.},
booktitle = {Proceedings of the 2019 3rd International Conference on Education and E-Learning},
pages = {113–118},
numpages = {6},
keywords = {Algorithmization and Programming, Curriculum innovation, IT teachers},
location = {Barcelona, Spain},
series = {ICEEL '19}
}

@inproceedings{10.1145/3587103.3594158,
author = {Guzdial, Mark},
title = {Scaffolding to Support Liberal Arts Students Learning to Program on Photographs},
year = {2023},
isbn = {9798400701399},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587103.3594158},
doi = {10.1145/3587103.3594158},
abstract = {Digital photographs are part of liberal arts students' classes (e.g., art, history, and production classes in film and television) and their daily smartphone-based life, in apps like Instagram and Snapchat. Building image filters can be a relevant and engaging context into using computing for humanities students. We have designed a new course for introducing computing in terms of creative expression. We use a scaffolded sequence of programming languages and activities to explore computing on photographs: (a) a teaspoon language for generating image filters, (b) a set of custom Snap blocks for even more sophisticated image filters, and (c) an ebook activity for mapping from Snap to Python. Each stage takes less than 10 minutes to introduce, with a wide variety of possible student activities (for in-class active learning or for later homework). While the tools build on each other, the earliest stage (the teaspoon language) could be used within a single class session in other liberal arts courses.},
booktitle = {Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 2},
pages = {577–578},
numpages = {2},
keywords = {CS for all, computational literacy, computational thinking, critical computing, digital humanities, digital photography, image filters, liberal arts and sciences},
location = {Turku, Finland},
series = {ITiCSE 2023}
}

@inproceedings{10.1145/3626253.3633419,
author = {Chan, Albert and Geng, Tieming and Kabbes, Joseph and Jin, Mingxian and Wu, Longfei},
title = {From Informal Ed to the University - Hands-on Use of the BBC Micro:bit in CS1 Courses Post-COVID},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3633419},
doi = {10.1145/3626253.3633419},
abstract = {BBC micro:bits have long been used in informal and pre-college educational environments. With a wealth of sensors and a rich ecosystem of add-ons, it provides an engaging platform for teaching basic computer science. The use of block programming separates the learning of Computational Thinking and coding from the challenges students face with language syntax. In addition, the physicality of the device increases student engagement as they see code interact with the real world.Typical university CS1 courses are already struggling to cover the content required for CS1 and CS2 courses. Adding yet another task to the lecture component is not tenable. However, implementing the micro:bit in the lab component to complement the lecture allows the student to enjoy the engagement provided by the micro:bit in the lab to motivate learning in the lecture. This is particularly important as overall student engagement has declined post-COVID. Creation of a simple Rock-Paper-Scissors game on the micro:bit introduces the concepts of variables and conditional statements using a block language, and allows automatic conversion to Python. Based on our experience with the use of the micro:bit in informal education settings, we know that student engagement with the device is high.Students will shift to using the MakeCode Python block components and add functionality manually as they become more familiar with Python syntax. The workshop will provide lesson plans and assignments for a full sequence of labs to use in CS1 and how they relate to the lecture sequence.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1893},
numpages = {1},
keywords = {cs1, makecode python., micro:bit, block programming},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@article{10.1145/2700517,
author = {Repenning, Alexander and Webb, David C. and Koh, Kyu Han and Nickerson, Hilarie and Miller, Susan B. and Brand, Catharine and Horses, Ian Her Many and Basawapatna, Ashok and Gluck, Fred and Grover, Ryan and Gutierrez, Kris and Repenning, Nadia},
title = {Scalable Game Design: A Strategy to Bring Systemic Computer Science Education to Schools through Game Design and Simulation Creation},
year = {2015},
issue_date = {May 2015},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {15},
number = {2},
url = {https://doi.org/10.1145/2700517},
doi = {10.1145/2700517},
abstract = {An educated citizenry that participates in and contributes to science technology engineering and mathematics innovation in the 21st century will require broad literacy and skills in computer science (CS). School systems will need to give increased attention to opportunities for students to engage in computational thinking and ways to promote a deeper understanding of how technologies and software are used as design tools. However, K-12 students in the United States are facing a broken pipeline for CS education. In response to this problem, we have developed the Scalable Game Design curriculum based on a strategy to integrate CS education into the regular school curriculum. This strategy includes opportunities for students to design and program games and science technology engineering and mathematics simulations. An approach called Computational Thinking Pattern Analysis has been developed to measure and correlate computational thinking skills relevant to game design and simulations. Results from a study with more than 10,000 students demonstrate rapid adoption of this curriculum by teachers from multiple disciplines, high student motivation, high levels of participation by women, and interest regardless of demographic background.},
journal = {ACM Trans. Comput. Educ.},
month = apr,
articleno = {11},
numpages = {31},
keywords = {Latent Semantic Analysis, STEM, elementary schools, game design, middle schools, programming}
}

@article{10.5555/3280489.3280525,
author = {Reimer, Yolanda J. and Blank, Lisa},
title = {Teacher (as student) driven curriculum development for an introductory computer science course},
year = {2018},
issue_date = {October 2018},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {34},
number = {1},
issn = {1937-4771},
abstract = {This research paper introduces the Joy and Beauty of Computing (JBC) curriculum, an introductory class in computer science (CS) that focuses on computational thinking and Python programming, and the weeklong professional development (PD) class we conducted for high school teachers from a large, rural state in the Northwest. With little prior experience in CS, this cohort of teachers became familiar with the JBC curriculum first as a learner and then through the lens of educators. A significant portion of PD time was devoted to pedagogically-based discussions of the JBC curriculum and adaptations suggested by the K12 teachers to localize the course for high school classroom needs. This paper details specific modifications that can be universally applied to most introductory computing courses. Results are based on years of collective experience from college and high school educators and can be very useful in the development of more effective CS courses deployed at the college or high school level.},
journal = {J. Comput. Sci. Coll.},
month = oct,
pages = {216–222},
numpages = {7}
}

@inproceedings{10.1145/3287324.3287415,
author = {McGee, Steven and Greenberg, Ronald I. and McGee-Tekula, Randi and Duck, Jennifer and Rasmussen, Andrew M. and Dettori, Lucia and Reed, Dale F.},
title = {An Examination of the Correlation of Exploring Computer Science Course Performance and the Development of Programming Expertise},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287415},
doi = {10.1145/3287324.3287415},
abstract = {This study investigated patterns in the development of computational thinking and programming expertise in the context of the Exploring Computer Science (ECS) program, a high school introductory CS course and professional development program designed to foster deep engagement through equitable inquiry around CS concepts. Prior research on programming expertise has identified three general areas of development --- program comprehension, program planning, and program generation. The pedagogical practices in ECS are consistent with problem solving approaches that support the development of programming expertise. The study took place in a large urban district during the 2016--17 school year with 28 ECS teachers and 1,931 students. A validated external assessment was used to measure the development of programming expertise. The results indicate that there were medium-sized, statistically significant increases from pretest to posttest, and there were no statistically significant differences by gender or race/ethnicity. After controlling for prior academic achievement, performance in the ECS course correlated with performance on the posttest. With respect to specific programming concepts, the results also provide evidence on the progression of the development of programming expertise. Students seem to develop comprehension and planning expertise prior to expertise in program generation. In addition, students seem to develop expertise with concrete tasks prior to abstract tasks.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1067–1073},
numpages = {7},
keywords = {computer programming skills, exploring computer science, high school computer science},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3478431.3499281,
author = {Adrion, W. Richards and Bevan, Katie and Foster, Paul and Matuszczak, Denise and Miller, Rachel and Rita, Laura and Sullivan, Florence R. and Veeragoudar, Sneha and Wohlers, Scott and Zeitz, Melissa},
title = {How a Research-Practice Partnership Refined its Strategy for Integrating CS/CT into K-5 Curricula: An Experience Report},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499281},
doi = {10.1145/3478431.3499281},
abstract = {Massachusetts defined K-12 Digital Literacy/Computer Science (DLCS) standards in 2016 and developed a 5-12 teacher licensure process, expecting K-4 teachers to be capable of teaching to the standards under their elementary license. An NSF CSforAll planning grant led to the establishment of an NSF 4-year Research-Practice Partnership (RPP) of district and school administrators, teachers, university researchers, and external evaluators in 2018. The RPP focused on the 33 K-5 serving schools to engage all students in integrated CS/CT teaching and learning and to create a cadre of skilled and confident elementary classroom teachers ready to support their students in learning CS/CT concepts and practices. The pandemic exacerbated barriers and inequities across the district, which serves over 25,000 diverse students (9.7\% white/non-Hispanic, 83.7\% high needs). Having observed a lack of awareness and expertise among many K-5 teachers for implementing CS/CT content and practices and seeing barriers to equitable CS/CT teaching and learning, the RPP designed an iterative, teacher-led, co-design of curriculum supported by equity-focused and embedded professional learning. This experience report describes how we refined our strategies for curriculum development and diffusion, professional learning, and importantly, our commitment to addressing diversity, equity, and inclusion beyond just reaching all students. The RPP broadened its focus on understanding race and equity to empower students to understand how technology affects their identities and to equip them to critically participate in the creation and use of technology.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {592–598},
numpages = {7},
keywords = {computational thinking, k-5 computer science education, research-practice partnership, teacher preparation},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

@inproceedings{10.1145/3587103.3594157,
author = {Guzdial, Mark},
title = {Scaffolding to Support Humanities Students Programming in a Human Language Context},
year = {2023},
isbn = {9798400701399},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3587103.3594157},
doi = {10.1145/3587103.3594157},
abstract = {Language is a key topic of interest for students in the humanities -- language is the way in which humans express themselves, communicate, and make art. Computing on language (e.g., recognizing language, generating language, building bots) can be a pathway into using computing for humanities contexts. At the University of Michigan, we are developing a new program to support students in liberal arts and sciences to learn about computing, explicitly including programming. We have designed two courses for introducing computing (1) in terms of creative expression and (2) around the implications of computing on justice. In both classes, we use a scaffolded sequence of programming languages and activities to explore computing on language: (a) a teaspoon language for sentence generation and recognition, (b) a set of custom Snap blocks for sentence generation and recognition, (c) a set of custom Snap blocks for building Chatbots, and (d) an ebook activity for mapping from Snap to Python. Each language takes less than 10 minutes to introduce, with a wide variety of possible student activities (for in-class active learning or for later homework). While the tools build on each other, the earliest stage (the teaspoon language) could be used within a single class session in linguistics, communications, or other liberal arts courses.},
booktitle = {Proceedings of the 2023 Conference on Innovation and Technology in Computer Science Education V. 2},
pages = {579–580},
numpages = {2},
keywords = {CS for all, computational literacy, computational thinking, critical computing, digital humanities, liberal arts and sciences},
location = {Turku, Finland},
series = {ITiCSE 2023}
}

@inproceedings{10.1145/3012430.3012572,
author = {Figueiredo, Jos\'{e} and Gomes, Nat\'{a}lia and Garc\'{\i}a-Pe\~{n}alvo, Francisco Jos\'{e}},
title = {Ne-course for learning programming},
year = {2016},
isbn = {9781450347471},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3012430.3012572},
doi = {10.1145/3012430.3012572},
abstract = {Difficulties in learning programming are a constant concern in engineering courses. In many research studies involving the learning programming must of the solutions presented, from the beginning of the first programming languages, was to apply different type of problems analysis. Literature relating to the understanding of nature of learning programming skills has been focused explicitly on the teaching methodology and few of them focus on abilities, characteristics and knowledge acquired over the life cycle of learning programming in each student. Most of the students enrolled in engineering courses, where programming is a crucial competence, never had the opportunity to develop skills of computational thinking. In this paper, we focus our work on the learning programming developing and applying a set of exercises where students with more difficulties can express and develop their skills in computational thinking. In order to understand some programming students difficulties we have create a set of exercises, and apply it to a pre-programming course, that allows teachers to understand how students analyse and comprehend aspects such as visualization, spatial interpretation and physical manipulation. This paper also reports on results obtained from a class experiment where Memory Transfer Language was used by students to learn programming. All the exercises must be resolved without any type of technology, designed as a ne-course (no electronic course) for learning programming.},
booktitle = {Proceedings of the Fourth International Conference on Technological Ecosystems for Enhancing Multiculturality},
pages = {549–553},
numpages = {5},
keywords = {cs0, cs1, introductory programming, learning programming, programming education, teaching programming},
location = {Salamanca, Spain},
series = {TEEM '16}
}

@article{10.5555/2544322.2544331,
author = {Burns, Richard and Eugene, Wanda and Barnes, Tiffany and Chandler, Stephen and Harwell, Megan and Omokaro, Osarieme},
title = {Reflections from a computational service learning trip to Haiti},
year = {2014},
issue_date = {January 2014},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {29},
number = {3},
issn = {1937-4771},
abstract = {This paper describes the experiences from two week-long service learning trips to Cap-Haitien, Haiti where a small group of computing students, faculty, and volunteers engaged young women from nearby underprivileged villages in computational thinking. Students recognized some of the barriers that must be overcome for a technological transformation of schools and communities in Haiti. Overall, these participating students reported an increased inspiration for computing and higher levels of leadership, communication, and collaboration skills.},
journal = {J. Comput. Sci. Coll.},
month = jan,
pages = {43–50},
numpages = {8}
}

@inproceedings{10.1145/3159450.3162331,
author = {Zahuantitla, Gabrielle I. and Holder, Aryanna},
title = {A Four Point Student-Led Strategy for Attracting Diverse Small College Commuter Campus Students to Computer Science: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162331},
doi = {10.1145/3159450.3162331},
abstract = {Currently, there is a push for integrating computer science education and computational thinking into the classroom. For example, major local and national organizations such as CS4ALL: NYC and Code.org aim to expose all students, including typically underrepresented groups, to computer science education nurturing students' intrinsic motivation. Furthermore, current research indicates that first-exposure to computer science is an important deciding factor as to whether students are open to computer science in future endeavors. Being one of the most diverse campuses in the nation, and a commuter campus, The State University of New York (SUNY) Old Westbury provides a unique opportunity to pilot how one might go about creating a motivating first exposure to computer science. Through a four point student-led strategy, we explore student pre-conceived attitudes towards computer science and programming to better understand what strategies might increase CS engagement. In order to do this, we host workshops revolving around creative computer science activities such as 3D game design and multimedia art projects. During these workshops, we collect pre and post questionnaires and use their data to gain insight into the Old Westbury student body's notions of computer science. Initial analyzed pre-survey data shows that 70\% of students thought Computer Science was difficult. However, post-survey data shows that, after the experience, approximately 90\% of students want to take additional workshops involving Computer Science.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {271},
numpages = {1},
keywords = {computational thinking, computer science education, game design, undergraduate exposure, workshops},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3478431.3499387,
author = {Krakowski, Ari and Greenwald, Eric and Roman, Natalie},
title = {"That's What Science Is, All This Data:" Coding Data Visualizations in Middle School Science Classrooms},
year = {2022},
isbn = {9781450390705},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3478431.3499387},
doi = {10.1145/3478431.3499387},
abstract = {In this experience report, we describe the Investigating Air Quality curriculum unit that integrates computational data practices with science learning in middle school science classrooms. The unit is part of the Coding Science Internship instructional model, designed to broaden access to computer science (CS) learning through scalable integration in core science courses, and through confronting barriers to equitable participation in STEM. In this report, we describe the core features of the unit and share preliminary findings and insights from student experiences in 13 science classrooms. We discuss affordances and challenges for student learning of computational data practices in formal science classrooms, and conclude with emerging recommendations for instructional designers.},
booktitle = {Proceedings of the 53rd ACM Technical Symposium on Computer Science Education - Volume 1},
pages = {36–42},
numpages = {7},
keywords = {computational thinking, data analysis, data science education, data visualization, middle school science},
location = {Providence, RI, USA},
series = {SIGCSE 2022}
}

